'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("_db_usedDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class _db_usedDataSet
    Inherits Global.System.Data.DataSet
    
    Private tabledokter As dokterDataTable
    
    Private tablehistory_pinjam As history_pinjamDataTable
    
    Private tablekunjungan As kunjunganDataTable
    
    Private tablepasien As pasienDataTable
    
    Private tablepenyimpanan As penyimpananDataTable
    
    Private tablepetugas As petugasDataTable
    
    Private tablepoliklinik As poliklinikDataTable
    
    Private tableusers As usersDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("dokter")) Is Nothing) Then
                MyBase.Tables.Add(New dokterDataTable(ds.Tables("dokter")))
            End If
            If (Not (ds.Tables("history_pinjam")) Is Nothing) Then
                MyBase.Tables.Add(New history_pinjamDataTable(ds.Tables("history_pinjam")))
            End If
            If (Not (ds.Tables("kunjungan")) Is Nothing) Then
                MyBase.Tables.Add(New kunjunganDataTable(ds.Tables("kunjungan")))
            End If
            If (Not (ds.Tables("pasien")) Is Nothing) Then
                MyBase.Tables.Add(New pasienDataTable(ds.Tables("pasien")))
            End If
            If (Not (ds.Tables("penyimpanan")) Is Nothing) Then
                MyBase.Tables.Add(New penyimpananDataTable(ds.Tables("penyimpanan")))
            End If
            If (Not (ds.Tables("petugas")) Is Nothing) Then
                MyBase.Tables.Add(New petugasDataTable(ds.Tables("petugas")))
            End If
            If (Not (ds.Tables("poliklinik")) Is Nothing) Then
                MyBase.Tables.Add(New poliklinikDataTable(ds.Tables("poliklinik")))
            End If
            If (Not (ds.Tables("users")) Is Nothing) Then
                MyBase.Tables.Add(New usersDataTable(ds.Tables("users")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dokter() As dokterDataTable
        Get
            Return Me.tabledokter
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property history_pinjam() As history_pinjamDataTable
        Get
            Return Me.tablehistory_pinjam
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property kunjungan() As kunjunganDataTable
        Get
            Return Me.tablekunjungan
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pasien() As pasienDataTable
        Get
            Return Me.tablepasien
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property penyimpanan() As penyimpananDataTable
        Get
            Return Me.tablepenyimpanan
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property petugas() As petugasDataTable
        Get
            Return Me.tablepetugas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property poliklinik() As poliklinikDataTable
        Get
            Return Me.tablepoliklinik
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property users() As usersDataTable
        Get
            Return Me.tableusers
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As _db_usedDataSet = CType(MyBase.Clone,_db_usedDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("dokter")) Is Nothing) Then
                MyBase.Tables.Add(New dokterDataTable(ds.Tables("dokter")))
            End If
            If (Not (ds.Tables("history_pinjam")) Is Nothing) Then
                MyBase.Tables.Add(New history_pinjamDataTable(ds.Tables("history_pinjam")))
            End If
            If (Not (ds.Tables("kunjungan")) Is Nothing) Then
                MyBase.Tables.Add(New kunjunganDataTable(ds.Tables("kunjungan")))
            End If
            If (Not (ds.Tables("pasien")) Is Nothing) Then
                MyBase.Tables.Add(New pasienDataTable(ds.Tables("pasien")))
            End If
            If (Not (ds.Tables("penyimpanan")) Is Nothing) Then
                MyBase.Tables.Add(New penyimpananDataTable(ds.Tables("penyimpanan")))
            End If
            If (Not (ds.Tables("petugas")) Is Nothing) Then
                MyBase.Tables.Add(New petugasDataTable(ds.Tables("petugas")))
            End If
            If (Not (ds.Tables("poliklinik")) Is Nothing) Then
                MyBase.Tables.Add(New poliklinikDataTable(ds.Tables("poliklinik")))
            End If
            If (Not (ds.Tables("users")) Is Nothing) Then
                MyBase.Tables.Add(New usersDataTable(ds.Tables("users")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabledokter = CType(MyBase.Tables("dokter"),dokterDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledokter) Is Nothing) Then
                Me.tabledokter.InitVars
            End If
        End If
        Me.tablehistory_pinjam = CType(MyBase.Tables("history_pinjam"),history_pinjamDataTable)
        If (initTable = true) Then
            If (Not (Me.tablehistory_pinjam) Is Nothing) Then
                Me.tablehistory_pinjam.InitVars
            End If
        End If
        Me.tablekunjungan = CType(MyBase.Tables("kunjungan"),kunjunganDataTable)
        If (initTable = true) Then
            If (Not (Me.tablekunjungan) Is Nothing) Then
                Me.tablekunjungan.InitVars
            End If
        End If
        Me.tablepasien = CType(MyBase.Tables("pasien"),pasienDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepasien) Is Nothing) Then
                Me.tablepasien.InitVars
            End If
        End If
        Me.tablepenyimpanan = CType(MyBase.Tables("penyimpanan"),penyimpananDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepenyimpanan) Is Nothing) Then
                Me.tablepenyimpanan.InitVars
            End If
        End If
        Me.tablepetugas = CType(MyBase.Tables("petugas"),petugasDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepetugas) Is Nothing) Then
                Me.tablepetugas.InitVars
            End If
        End If
        Me.tablepoliklinik = CType(MyBase.Tables("poliklinik"),poliklinikDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepoliklinik) Is Nothing) Then
                Me.tablepoliklinik.InitVars
            End If
        End If
        Me.tableusers = CType(MyBase.Tables("users"),usersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableusers) Is Nothing) Then
                Me.tableusers.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "_db_usedDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/_db_usedDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabledokter = New dokterDataTable()
        MyBase.Tables.Add(Me.tabledokter)
        Me.tablehistory_pinjam = New history_pinjamDataTable()
        MyBase.Tables.Add(Me.tablehistory_pinjam)
        Me.tablekunjungan = New kunjunganDataTable()
        MyBase.Tables.Add(Me.tablekunjungan)
        Me.tablepasien = New pasienDataTable()
        MyBase.Tables.Add(Me.tablepasien)
        Me.tablepenyimpanan = New penyimpananDataTable()
        MyBase.Tables.Add(Me.tablepenyimpanan)
        Me.tablepetugas = New petugasDataTable()
        MyBase.Tables.Add(Me.tablepetugas)
        Me.tablepoliklinik = New poliklinikDataTable()
        MyBase.Tables.Add(Me.tablepoliklinik)
        Me.tableusers = New usersDataTable()
        MyBase.Tables.Add(Me.tableusers)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializedokter() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializehistory_pinjam() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializekunjungan() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializepasien() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializepenyimpanan() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializepetugas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializepoliklinik() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeusers() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As _db_usedDataSet = New _db_usedDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub dokterRowChangeEventHandler(ByVal sender As Object, ByVal e As dokterRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub history_pinjamRowChangeEventHandler(ByVal sender As Object, ByVal e As history_pinjamRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub kunjunganRowChangeEventHandler(ByVal sender As Object, ByVal e As kunjunganRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub pasienRowChangeEventHandler(ByVal sender As Object, ByVal e As pasienRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub penyimpananRowChangeEventHandler(ByVal sender As Object, ByVal e As penyimpananRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub petugasRowChangeEventHandler(ByVal sender As Object, ByVal e As petugasRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub poliklinikRowChangeEventHandler(ByVal sender As Object, ByVal e As poliklinikRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub usersRowChangeEventHandler(ByVal sender As Object, ByVal e As usersRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dokterDataTable
        Inherits Global.System.Data.TypedTableBase(Of dokterRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnnip As Global.System.Data.DataColumn
        
        Private columnnama As Global.System.Data.DataColumn
        
        Private columnkode As Global.System.Data.DataColumn
        
        Private columnspesialis As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dokter"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property namaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnama
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property kodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property spesialisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnspesialis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dokterRow
            Get
                Return CType(Me.Rows(index),dokterRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event dokterRowChanging As dokterRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event dokterRowChanged As dokterRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event dokterRowDeleting As dokterRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event dokterRowDeleted As dokterRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AdddokterRow(ByVal row As dokterRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AdddokterRow(ByVal nip As String, ByVal nama As String, ByVal kode As String, ByVal spesialis As String) As dokterRow
            Dim rowdokterRow As dokterRow = CType(Me.NewRow,dokterRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, nip, nama, kode, spesialis}
            rowdokterRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdokterRow)
            Return rowdokterRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As dokterRow
            Return CType(Me.Rows.Find(New Object() {id}),dokterRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dokterDataTable = CType(MyBase.Clone,dokterDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dokterDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnnip = MyBase.Columns("nip")
            Me.columnnama = MyBase.Columns("nama")
            Me.columnkode = MyBase.Columns("kode")
            Me.columnspesialis = MyBase.Columns("spesialis")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnnip = New Global.System.Data.DataColumn("nip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnip)
            Me.columnnama = New Global.System.Data.DataColumn("nama", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnama)
            Me.columnkode = New Global.System.Data.DataColumn("kode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkode)
            Me.columnspesialis = New Global.System.Data.DataColumn("spesialis", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnspesialis)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
            Me.columnnip.AllowDBNull = false
            Me.columnnip.MaxLength = 45
            Me.columnnama.AllowDBNull = false
            Me.columnnama.MaxLength = 45
            Me.columnkode.AllowDBNull = false
            Me.columnkode.MaxLength = 45
            Me.columnspesialis.AllowDBNull = false
            Me.columnspesialis.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewdokterRow() As dokterRow
            Return CType(Me.NewRow,dokterRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dokterRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dokterRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dokterRowChangedEvent) Is Nothing) Then
                RaiseEvent dokterRowChanged(Me, New dokterRowChangeEvent(CType(e.Row,dokterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dokterRowChangingEvent) Is Nothing) Then
                RaiseEvent dokterRowChanging(Me, New dokterRowChangeEvent(CType(e.Row,dokterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dokterRowDeletedEvent) Is Nothing) Then
                RaiseEvent dokterRowDeleted(Me, New dokterRowChangeEvent(CType(e.Row,dokterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dokterRowDeletingEvent) Is Nothing) Then
                RaiseEvent dokterRowDeleting(Me, New dokterRowChangeEvent(CType(e.Row,dokterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovedokterRow(ByVal row As dokterRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _db_usedDataSet = New _db_usedDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dokterDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class history_pinjamDataTable
        Inherits Global.System.Data.TypedTableBase(Of history_pinjamRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnno_medrek As Global.System.Data.DataColumn
        
        Private columnnama_peminjam As Global.System.Data.DataColumn
        
        Private columnperan As Global.System.Data.DataColumn
        
        Private columntgl_pinjam As Global.System.Data.DataColumn
        
        Private columntgl_kembali As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "history_pinjam"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property no_medrekColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnno_medrek
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nama_peminjamColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnama_peminjam
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property peranColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnperan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tgl_pinjamColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntgl_pinjam
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tgl_kembaliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntgl_kembali
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As history_pinjamRow
            Get
                Return CType(Me.Rows(index),history_pinjamRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event history_pinjamRowChanging As history_pinjamRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event history_pinjamRowChanged As history_pinjamRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event history_pinjamRowDeleting As history_pinjamRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event history_pinjamRowDeleted As history_pinjamRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addhistory_pinjamRow(ByVal row As history_pinjamRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addhistory_pinjamRow(ByVal no_medrek As String, ByVal nama_peminjam As String, ByVal peran As String, ByVal tgl_pinjam As String, ByVal tgl_kembali As String) As history_pinjamRow
            Dim rowhistory_pinjamRow As history_pinjamRow = CType(Me.NewRow,history_pinjamRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, no_medrek, nama_peminjam, peran, tgl_pinjam, tgl_kembali}
            rowhistory_pinjamRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowhistory_pinjamRow)
            Return rowhistory_pinjamRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As history_pinjamRow
            Return CType(Me.Rows.Find(New Object() {id}),history_pinjamRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As history_pinjamDataTable = CType(MyBase.Clone,history_pinjamDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New history_pinjamDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnno_medrek = MyBase.Columns("no_medrek")
            Me.columnnama_peminjam = MyBase.Columns("nama_peminjam")
            Me.columnperan = MyBase.Columns("peran")
            Me.columntgl_pinjam = MyBase.Columns("tgl_pinjam")
            Me.columntgl_kembali = MyBase.Columns("tgl_kembali")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnno_medrek = New Global.System.Data.DataColumn("no_medrek", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnno_medrek)
            Me.columnnama_peminjam = New Global.System.Data.DataColumn("nama_peminjam", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnama_peminjam)
            Me.columnperan = New Global.System.Data.DataColumn("peran", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnperan)
            Me.columntgl_pinjam = New Global.System.Data.DataColumn("tgl_pinjam", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntgl_pinjam)
            Me.columntgl_kembali = New Global.System.Data.DataColumn("tgl_kembali", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntgl_kembali)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
            Me.columnno_medrek.AllowDBNull = false
            Me.columnno_medrek.MaxLength = 45
            Me.columnnama_peminjam.AllowDBNull = false
            Me.columnnama_peminjam.MaxLength = 45
            Me.columnperan.AllowDBNull = false
            Me.columnperan.MaxLength = 45
            Me.columntgl_pinjam.MaxLength = 45
            Me.columntgl_kembali.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newhistory_pinjamRow() As history_pinjamRow
            Return CType(Me.NewRow,history_pinjamRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New history_pinjamRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(history_pinjamRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.history_pinjamRowChangedEvent) Is Nothing) Then
                RaiseEvent history_pinjamRowChanged(Me, New history_pinjamRowChangeEvent(CType(e.Row,history_pinjamRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.history_pinjamRowChangingEvent) Is Nothing) Then
                RaiseEvent history_pinjamRowChanging(Me, New history_pinjamRowChangeEvent(CType(e.Row,history_pinjamRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.history_pinjamRowDeletedEvent) Is Nothing) Then
                RaiseEvent history_pinjamRowDeleted(Me, New history_pinjamRowChangeEvent(CType(e.Row,history_pinjamRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.history_pinjamRowDeletingEvent) Is Nothing) Then
                RaiseEvent history_pinjamRowDeleting(Me, New history_pinjamRowChangeEvent(CType(e.Row,history_pinjamRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removehistory_pinjamRow(ByVal row As history_pinjamRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _db_usedDataSet = New _db_usedDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "history_pinjamDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class kunjunganDataTable
        Inherits Global.System.Data.TypedTableBase(Of kunjunganRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columntgl_kunjungan As Global.System.Data.DataColumn
        
        Private columnno_medrek As Global.System.Data.DataColumn
        
        Private columnnama As Global.System.Data.DataColumn
        
        Private columnid_pasien As Global.System.Data.DataColumn
        
        Private columnkeluhan As Global.System.Data.DataColumn
        
        Private columndiagnosa As Global.System.Data.DataColumn
        
        Private columntekanan_darah As Global.System.Data.DataColumn
        
        Private columnberat_badan As Global.System.Data.DataColumn
        
        Private columntindakan As Global.System.Data.DataColumn
        
        Private columnvisite As Global.System.Data.DataColumn
        
        Private columnkunjungan_lagi As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "kunjungan"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tgl_kunjunganColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntgl_kunjungan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property no_medrekColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnno_medrek
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property namaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnama
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_pasienColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_pasien
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property keluhanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkeluhan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property diagnosaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiagnosa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tekanan_darahColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntekanan_darah
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property berat_badanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnberat_badan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tindakanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntindakan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property visiteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvisite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property kunjungan_lagiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkunjungan_lagi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As kunjunganRow
            Get
                Return CType(Me.Rows(index),kunjunganRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event kunjunganRowChanging As kunjunganRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event kunjunganRowChanged As kunjunganRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event kunjunganRowDeleting As kunjunganRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event kunjunganRowDeleted As kunjunganRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddkunjunganRow(ByVal row As kunjunganRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddkunjunganRow(ByVal tgl_kunjungan As String, ByVal no_medrek As String, ByVal nama As String, ByVal id_pasien As Long, ByVal keluhan As String, ByVal diagnosa As String, ByVal tekanan_darah As String, ByVal berat_badan As Long, ByVal tindakan As String, ByVal visite As String, ByVal kunjungan_lagi As String) As kunjunganRow
            Dim rowkunjunganRow As kunjunganRow = CType(Me.NewRow,kunjunganRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, tgl_kunjungan, no_medrek, nama, id_pasien, keluhan, diagnosa, tekanan_darah, berat_badan, tindakan, visite, kunjungan_lagi}
            rowkunjunganRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowkunjunganRow)
            Return rowkunjunganRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As kunjunganRow
            Return CType(Me.Rows.Find(New Object() {id}),kunjunganRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As kunjunganDataTable = CType(MyBase.Clone,kunjunganDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New kunjunganDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columntgl_kunjungan = MyBase.Columns("tgl_kunjungan")
            Me.columnno_medrek = MyBase.Columns("no_medrek")
            Me.columnnama = MyBase.Columns("nama")
            Me.columnid_pasien = MyBase.Columns("id_pasien")
            Me.columnkeluhan = MyBase.Columns("keluhan")
            Me.columndiagnosa = MyBase.Columns("diagnosa")
            Me.columntekanan_darah = MyBase.Columns("tekanan_darah")
            Me.columnberat_badan = MyBase.Columns("berat_badan")
            Me.columntindakan = MyBase.Columns("tindakan")
            Me.columnvisite = MyBase.Columns("visite")
            Me.columnkunjungan_lagi = MyBase.Columns("kunjungan_lagi")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columntgl_kunjungan = New Global.System.Data.DataColumn("tgl_kunjungan", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntgl_kunjungan)
            Me.columnno_medrek = New Global.System.Data.DataColumn("no_medrek", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnno_medrek)
            Me.columnnama = New Global.System.Data.DataColumn("nama", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnama)
            Me.columnid_pasien = New Global.System.Data.DataColumn("id_pasien", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_pasien)
            Me.columnkeluhan = New Global.System.Data.DataColumn("keluhan", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkeluhan)
            Me.columndiagnosa = New Global.System.Data.DataColumn("diagnosa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiagnosa)
            Me.columntekanan_darah = New Global.System.Data.DataColumn("tekanan_darah", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntekanan_darah)
            Me.columnberat_badan = New Global.System.Data.DataColumn("berat_badan", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnberat_badan)
            Me.columntindakan = New Global.System.Data.DataColumn("tindakan", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntindakan)
            Me.columnvisite = New Global.System.Data.DataColumn("visite", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvisite)
            Me.columnkunjungan_lagi = New Global.System.Data.DataColumn("kunjungan_lagi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkunjungan_lagi)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
            Me.columntgl_kunjungan.MaxLength = 45
            Me.columnno_medrek.MaxLength = 45
            Me.columnnama.MaxLength = 45
            Me.columnkeluhan.MaxLength = 45
            Me.columndiagnosa.MaxLength = 45
            Me.columntekanan_darah.MaxLength = 45
            Me.columntindakan.MaxLength = 45
            Me.columnvisite.MaxLength = 45
            Me.columnkunjungan_lagi.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewkunjunganRow() As kunjunganRow
            Return CType(Me.NewRow,kunjunganRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New kunjunganRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(kunjunganRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.kunjunganRowChangedEvent) Is Nothing) Then
                RaiseEvent kunjunganRowChanged(Me, New kunjunganRowChangeEvent(CType(e.Row,kunjunganRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.kunjunganRowChangingEvent) Is Nothing) Then
                RaiseEvent kunjunganRowChanging(Me, New kunjunganRowChangeEvent(CType(e.Row,kunjunganRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.kunjunganRowDeletedEvent) Is Nothing) Then
                RaiseEvent kunjunganRowDeleted(Me, New kunjunganRowChangeEvent(CType(e.Row,kunjunganRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.kunjunganRowDeletingEvent) Is Nothing) Then
                RaiseEvent kunjunganRowDeleting(Me, New kunjunganRowChangeEvent(CType(e.Row,kunjunganRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovekunjunganRow(ByVal row As kunjunganRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _db_usedDataSet = New _db_usedDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "kunjunganDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class pasienDataTable
        Inherits Global.System.Data.TypedTableBase(Of pasienRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnno_medrek As Global.System.Data.DataColumn
        
        Private columnstatus As Global.System.Data.DataColumn
        
        Private columntgl_buat As Global.System.Data.DataColumn
        
        Private columnnama As Global.System.Data.DataColumn
        
        Private columntgl_lahir As Global.System.Data.DataColumn
        
        Private columntempat_lahir As Global.System.Data.DataColumn
        
        Private columnkelamin As Global.System.Data.DataColumn
        
        Private columnalamat As Global.System.Data.DataColumn
        
        Private columntelp As Global.System.Data.DataColumn
        
        Private columntotal_kunjungan As Global.System.Data.DataColumn
        
        Private columncatatan As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "pasien"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property no_medrekColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnno_medrek
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tgl_buatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntgl_buat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property namaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnama
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tgl_lahirColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntgl_lahir
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tempat_lahirColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntempat_lahir
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property kelaminColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkelamin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property alamatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalamat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property telpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntelp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property total_kunjunganColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntotal_kunjungan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property catatanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncatatan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As pasienRow
            Get
                Return CType(Me.Rows(index),pasienRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event pasienRowChanging As pasienRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event pasienRowChanged As pasienRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event pasienRowDeleting As pasienRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event pasienRowDeleted As pasienRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddpasienRow(ByVal row As pasienRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddpasienRow(ByVal no_medrek As String, ByVal status As String, ByVal tgl_buat As String, ByVal nama As String, ByVal tgl_lahir As String, ByVal tempat_lahir As String, ByVal kelamin As String, ByVal alamat As String, ByVal telp As String, ByVal total_kunjungan As Long, ByVal catatan As String) As pasienRow
            Dim rowpasienRow As pasienRow = CType(Me.NewRow,pasienRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, no_medrek, status, tgl_buat, nama, tgl_lahir, tempat_lahir, kelamin, alamat, telp, total_kunjungan, catatan}
            rowpasienRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowpasienRow)
            Return rowpasienRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As pasienRow
            Return CType(Me.Rows.Find(New Object() {id}),pasienRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As pasienDataTable = CType(MyBase.Clone,pasienDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New pasienDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnno_medrek = MyBase.Columns("no_medrek")
            Me.columnstatus = MyBase.Columns("status")
            Me.columntgl_buat = MyBase.Columns("tgl_buat")
            Me.columnnama = MyBase.Columns("nama")
            Me.columntgl_lahir = MyBase.Columns("tgl_lahir")
            Me.columntempat_lahir = MyBase.Columns("tempat_lahir")
            Me.columnkelamin = MyBase.Columns("kelamin")
            Me.columnalamat = MyBase.Columns("alamat")
            Me.columntelp = MyBase.Columns("telp")
            Me.columntotal_kunjungan = MyBase.Columns("total_kunjungan")
            Me.columncatatan = MyBase.Columns("catatan")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnno_medrek = New Global.System.Data.DataColumn("no_medrek", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnno_medrek)
            Me.columnstatus = New Global.System.Data.DataColumn("status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatus)
            Me.columntgl_buat = New Global.System.Data.DataColumn("tgl_buat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntgl_buat)
            Me.columnnama = New Global.System.Data.DataColumn("nama", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnama)
            Me.columntgl_lahir = New Global.System.Data.DataColumn("tgl_lahir", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntgl_lahir)
            Me.columntempat_lahir = New Global.System.Data.DataColumn("tempat_lahir", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntempat_lahir)
            Me.columnkelamin = New Global.System.Data.DataColumn("kelamin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkelamin)
            Me.columnalamat = New Global.System.Data.DataColumn("alamat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalamat)
            Me.columntelp = New Global.System.Data.DataColumn("telp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntelp)
            Me.columntotal_kunjungan = New Global.System.Data.DataColumn("total_kunjungan", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntotal_kunjungan)
            Me.columncatatan = New Global.System.Data.DataColumn("catatan", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncatatan)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
            Me.columnno_medrek.AllowDBNull = false
            Me.columnno_medrek.MaxLength = 45
            Me.columnstatus.AllowDBNull = false
            Me.columnstatus.MaxLength = 45
            Me.columntgl_buat.AllowDBNull = false
            Me.columntgl_buat.MaxLength = 45
            Me.columnnama.AllowDBNull = false
            Me.columnnama.MaxLength = 45
            Me.columntgl_lahir.AllowDBNull = false
            Me.columntgl_lahir.MaxLength = 45
            Me.columntempat_lahir.AllowDBNull = false
            Me.columntempat_lahir.MaxLength = 45
            Me.columnkelamin.AllowDBNull = false
            Me.columnkelamin.MaxLength = 45
            Me.columnalamat.AllowDBNull = false
            Me.columnalamat.MaxLength = 45
            Me.columntelp.MaxLength = 45
            Me.columncatatan.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewpasienRow() As pasienRow
            Return CType(Me.NewRow,pasienRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New pasienRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(pasienRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pasienRowChangedEvent) Is Nothing) Then
                RaiseEvent pasienRowChanged(Me, New pasienRowChangeEvent(CType(e.Row,pasienRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pasienRowChangingEvent) Is Nothing) Then
                RaiseEvent pasienRowChanging(Me, New pasienRowChangeEvent(CType(e.Row,pasienRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pasienRowDeletedEvent) Is Nothing) Then
                RaiseEvent pasienRowDeleted(Me, New pasienRowChangeEvent(CType(e.Row,pasienRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pasienRowDeletingEvent) Is Nothing) Then
                RaiseEvent pasienRowDeleting(Me, New pasienRowChangeEvent(CType(e.Row,pasienRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovepasienRow(ByVal row As pasienRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _db_usedDataSet = New _db_usedDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "pasienDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class penyimpananDataTable
        Inherits Global.System.Data.TypedTableBase(Of penyimpananRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnno_medrek As Global.System.Data.DataColumn
        
        Private columnnama As Global.System.Data.DataColumn
        
        Private columntgl_simpan As Global.System.Data.DataColumn
        
        Private columnlokasi_rak As Global.System.Data.DataColumn
        
        Private columnstatus As Global.System.Data.DataColumn
        
        Private columnnama_petugas As Global.System.Data.DataColumn
        
        Private columnnip_petugas As Global.System.Data.DataColumn
        
        Private columnnama_dokter As Global.System.Data.DataColumn
        
        Private columnnip_dokter As Global.System.Data.DataColumn
        
        Private columntgl_pinjam As Global.System.Data.DataColumn
        
        Private columntgl_kembali As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "penyimpanan"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property no_medrekColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnno_medrek
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property namaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnama
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tgl_simpanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntgl_simpan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property lokasi_rakColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlokasi_rak
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nama_petugasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnama_petugas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nip_petugasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnip_petugas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nama_dokterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnama_dokter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nip_dokterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnip_dokter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tgl_pinjamColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntgl_pinjam
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tgl_kembaliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntgl_kembali
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As penyimpananRow
            Get
                Return CType(Me.Rows(index),penyimpananRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event penyimpananRowChanging As penyimpananRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event penyimpananRowChanged As penyimpananRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event penyimpananRowDeleting As penyimpananRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event penyimpananRowDeleted As penyimpananRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddpenyimpananRow(ByVal row As penyimpananRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddpenyimpananRow(ByVal no_medrek As String, ByVal nama As String, ByVal tgl_simpan As String, ByVal lokasi_rak As Long, ByVal status As String, ByVal nama_petugas As String, ByVal nip_petugas As String, ByVal nama_dokter As String, ByVal nip_dokter As String, ByVal tgl_pinjam As String, ByVal tgl_kembali As String) As penyimpananRow
            Dim rowpenyimpananRow As penyimpananRow = CType(Me.NewRow,penyimpananRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, no_medrek, nama, tgl_simpan, lokasi_rak, status, nama_petugas, nip_petugas, nama_dokter, nip_dokter, tgl_pinjam, tgl_kembali}
            rowpenyimpananRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowpenyimpananRow)
            Return rowpenyimpananRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As penyimpananRow
            Return CType(Me.Rows.Find(New Object() {id}),penyimpananRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As penyimpananDataTable = CType(MyBase.Clone,penyimpananDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New penyimpananDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnno_medrek = MyBase.Columns("no_medrek")
            Me.columnnama = MyBase.Columns("nama")
            Me.columntgl_simpan = MyBase.Columns("tgl_simpan")
            Me.columnlokasi_rak = MyBase.Columns("lokasi_rak")
            Me.columnstatus = MyBase.Columns("status")
            Me.columnnama_petugas = MyBase.Columns("nama_petugas")
            Me.columnnip_petugas = MyBase.Columns("nip_petugas")
            Me.columnnama_dokter = MyBase.Columns("nama_dokter")
            Me.columnnip_dokter = MyBase.Columns("nip_dokter")
            Me.columntgl_pinjam = MyBase.Columns("tgl_pinjam")
            Me.columntgl_kembali = MyBase.Columns("tgl_kembali")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnno_medrek = New Global.System.Data.DataColumn("no_medrek", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnno_medrek)
            Me.columnnama = New Global.System.Data.DataColumn("nama", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnama)
            Me.columntgl_simpan = New Global.System.Data.DataColumn("tgl_simpan", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntgl_simpan)
            Me.columnlokasi_rak = New Global.System.Data.DataColumn("lokasi_rak", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlokasi_rak)
            Me.columnstatus = New Global.System.Data.DataColumn("status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatus)
            Me.columnnama_petugas = New Global.System.Data.DataColumn("nama_petugas", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnama_petugas)
            Me.columnnip_petugas = New Global.System.Data.DataColumn("nip_petugas", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnip_petugas)
            Me.columnnama_dokter = New Global.System.Data.DataColumn("nama_dokter", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnama_dokter)
            Me.columnnip_dokter = New Global.System.Data.DataColumn("nip_dokter", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnip_dokter)
            Me.columntgl_pinjam = New Global.System.Data.DataColumn("tgl_pinjam", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntgl_pinjam)
            Me.columntgl_kembali = New Global.System.Data.DataColumn("tgl_kembali", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntgl_kembali)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
            Me.columnno_medrek.AllowDBNull = false
            Me.columnno_medrek.MaxLength = 45
            Me.columnnama.AllowDBNull = false
            Me.columnnama.MaxLength = 45
            Me.columntgl_simpan.MaxLength = 45
            Me.columnstatus.AllowDBNull = false
            Me.columnstatus.MaxLength = 2147483647
            Me.columnnama_petugas.AllowDBNull = false
            Me.columnnama_petugas.MaxLength = 45
            Me.columnnip_petugas.AllowDBNull = false
            Me.columnnip_petugas.MaxLength = 45
            Me.columnnama_dokter.AllowDBNull = false
            Me.columnnama_dokter.MaxLength = 45
            Me.columnnip_dokter.AllowDBNull = false
            Me.columnnip_dokter.MaxLength = 45
            Me.columntgl_pinjam.MaxLength = 45
            Me.columntgl_kembali.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewpenyimpananRow() As penyimpananRow
            Return CType(Me.NewRow,penyimpananRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New penyimpananRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(penyimpananRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.penyimpananRowChangedEvent) Is Nothing) Then
                RaiseEvent penyimpananRowChanged(Me, New penyimpananRowChangeEvent(CType(e.Row,penyimpananRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.penyimpananRowChangingEvent) Is Nothing) Then
                RaiseEvent penyimpananRowChanging(Me, New penyimpananRowChangeEvent(CType(e.Row,penyimpananRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.penyimpananRowDeletedEvent) Is Nothing) Then
                RaiseEvent penyimpananRowDeleted(Me, New penyimpananRowChangeEvent(CType(e.Row,penyimpananRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.penyimpananRowDeletingEvent) Is Nothing) Then
                RaiseEvent penyimpananRowDeleting(Me, New penyimpananRowChangeEvent(CType(e.Row,penyimpananRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovepenyimpananRow(ByVal row As penyimpananRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _db_usedDataSet = New _db_usedDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "penyimpananDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class petugasDataTable
        Inherits Global.System.Data.TypedTableBase(Of petugasRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnnip As Global.System.Data.DataColumn
        
        Private columnnama As Global.System.Data.DataColumn
        
        Private columnjabatan As Global.System.Data.DataColumn
        
        Private columntelp As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "petugas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property namaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnama
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property jabatanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnjabatan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property telpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntelp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As petugasRow
            Get
                Return CType(Me.Rows(index),petugasRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event petugasRowChanging As petugasRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event petugasRowChanged As petugasRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event petugasRowDeleting As petugasRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event petugasRowDeleted As petugasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddpetugasRow(ByVal row As petugasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddpetugasRow(ByVal nip As String, ByVal nama As String, ByVal jabatan As String, ByVal telp As String) As petugasRow
            Dim rowpetugasRow As petugasRow = CType(Me.NewRow,petugasRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, nip, nama, jabatan, telp}
            rowpetugasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowpetugasRow)
            Return rowpetugasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As petugasRow
            Return CType(Me.Rows.Find(New Object() {id}),petugasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As petugasDataTable = CType(MyBase.Clone,petugasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New petugasDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnnip = MyBase.Columns("nip")
            Me.columnnama = MyBase.Columns("nama")
            Me.columnjabatan = MyBase.Columns("jabatan")
            Me.columntelp = MyBase.Columns("telp")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnnip = New Global.System.Data.DataColumn("nip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnip)
            Me.columnnama = New Global.System.Data.DataColumn("nama", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnama)
            Me.columnjabatan = New Global.System.Data.DataColumn("jabatan", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjabatan)
            Me.columntelp = New Global.System.Data.DataColumn("telp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntelp)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
            Me.columnnip.AllowDBNull = false
            Me.columnnip.MaxLength = 45
            Me.columnnama.AllowDBNull = false
            Me.columnnama.MaxLength = 45
            Me.columnjabatan.AllowDBNull = false
            Me.columnjabatan.MaxLength = 45
            Me.columntelp.AllowDBNull = false
            Me.columntelp.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewpetugasRow() As petugasRow
            Return CType(Me.NewRow,petugasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New petugasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(petugasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.petugasRowChangedEvent) Is Nothing) Then
                RaiseEvent petugasRowChanged(Me, New petugasRowChangeEvent(CType(e.Row,petugasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.petugasRowChangingEvent) Is Nothing) Then
                RaiseEvent petugasRowChanging(Me, New petugasRowChangeEvent(CType(e.Row,petugasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.petugasRowDeletedEvent) Is Nothing) Then
                RaiseEvent petugasRowDeleted(Me, New petugasRowChangeEvent(CType(e.Row,petugasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.petugasRowDeletingEvent) Is Nothing) Then
                RaiseEvent petugasRowDeleting(Me, New petugasRowChangeEvent(CType(e.Row,petugasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovepetugasRow(ByVal row As petugasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _db_usedDataSet = New _db_usedDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "petugasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class poliklinikDataTable
        Inherits Global.System.Data.TypedTableBase(Of poliklinikRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnunit As Global.System.Data.DataColumn
        
        Private columndokter As Global.System.Data.DataColumn
        
        Private columnnama_petugas As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "poliklinik"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property unitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property dokterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndokter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nama_petugasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnama_petugas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As poliklinikRow
            Get
                Return CType(Me.Rows(index),poliklinikRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event poliklinikRowChanging As poliklinikRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event poliklinikRowChanged As poliklinikRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event poliklinikRowDeleting As poliklinikRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event poliklinikRowDeleted As poliklinikRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddpoliklinikRow(ByVal row As poliklinikRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddpoliklinikRow(ByVal unit As String, ByVal dokter As String, ByVal nama_petugas As String) As poliklinikRow
            Dim rowpoliklinikRow As poliklinikRow = CType(Me.NewRow,poliklinikRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, unit, dokter, nama_petugas}
            rowpoliklinikRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowpoliklinikRow)
            Return rowpoliklinikRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As poliklinikRow
            Return CType(Me.Rows.Find(New Object() {id}),poliklinikRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As poliklinikDataTable = CType(MyBase.Clone,poliklinikDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New poliklinikDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnunit = MyBase.Columns("unit")
            Me.columndokter = MyBase.Columns("dokter")
            Me.columnnama_petugas = MyBase.Columns("nama_petugas")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnunit = New Global.System.Data.DataColumn("unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunit)
            Me.columndokter = New Global.System.Data.DataColumn("dokter", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndokter)
            Me.columnnama_petugas = New Global.System.Data.DataColumn("nama_petugas", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnama_petugas)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
            Me.columnunit.AllowDBNull = false
            Me.columnunit.MaxLength = 45
            Me.columndokter.MaxLength = 45
            Me.columnnama_petugas.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewpoliklinikRow() As poliklinikRow
            Return CType(Me.NewRow,poliklinikRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New poliklinikRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(poliklinikRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.poliklinikRowChangedEvent) Is Nothing) Then
                RaiseEvent poliklinikRowChanged(Me, New poliklinikRowChangeEvent(CType(e.Row,poliklinikRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.poliklinikRowChangingEvent) Is Nothing) Then
                RaiseEvent poliklinikRowChanging(Me, New poliklinikRowChangeEvent(CType(e.Row,poliklinikRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.poliklinikRowDeletedEvent) Is Nothing) Then
                RaiseEvent poliklinikRowDeleted(Me, New poliklinikRowChangeEvent(CType(e.Row,poliklinikRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.poliklinikRowDeletingEvent) Is Nothing) Then
                RaiseEvent poliklinikRowDeleting(Me, New poliklinikRowChangeEvent(CType(e.Row,poliklinikRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovepoliklinikRow(ByVal row As poliklinikRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _db_usedDataSet = New _db_usedDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "poliklinikDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class usersDataTable
        Inherits Global.System.Data.TypedTableBase(Of usersRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnusername As Global.System.Data.DataColumn
        
        Private columnpassw As Global.System.Data.DataColumn
        
        Private columnrec_quest As Global.System.Data.DataColumn
        
        Private columnrec_answer As Global.System.Data.DataColumn
        
        Private columnlogo_filename As Global.System.Data.DataColumn
        
        Private columnlogo_content As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "users"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property usernameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnusername
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property passwColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpassw
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property rec_questColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrec_quest
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property rec_answerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrec_answer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property logo_filenameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlogo_filename
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property logo_contentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlogo_content
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As usersRow
            Get
                Return CType(Me.Rows(index),usersRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event usersRowChanging As usersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event usersRowChanged As usersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event usersRowDeleting As usersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event usersRowDeleted As usersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddusersRow(ByVal row As usersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddusersRow(ByVal username As String, ByVal passw As String, ByVal rec_quest As String, ByVal rec_answer As String, ByVal logo_filename As String, ByVal logo_content() As Byte) As usersRow
            Dim rowusersRow As usersRow = CType(Me.NewRow,usersRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, username, passw, rec_quest, rec_answer, logo_filename, logo_content}
            rowusersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowusersRow)
            Return rowusersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As usersRow
            Return CType(Me.Rows.Find(New Object() {id}),usersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As usersDataTable = CType(MyBase.Clone,usersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New usersDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnusername = MyBase.Columns("username")
            Me.columnpassw = MyBase.Columns("passw")
            Me.columnrec_quest = MyBase.Columns("rec_quest")
            Me.columnrec_answer = MyBase.Columns("rec_answer")
            Me.columnlogo_filename = MyBase.Columns("logo_filename")
            Me.columnlogo_content = MyBase.Columns("logo_content")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnusername = New Global.System.Data.DataColumn("username", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnusername)
            Me.columnpassw = New Global.System.Data.DataColumn("passw", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpassw)
            Me.columnrec_quest = New Global.System.Data.DataColumn("rec_quest", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrec_quest)
            Me.columnrec_answer = New Global.System.Data.DataColumn("rec_answer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrec_answer)
            Me.columnlogo_filename = New Global.System.Data.DataColumn("logo_filename", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlogo_filename)
            Me.columnlogo_content = New Global.System.Data.DataColumn("logo_content", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlogo_content)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
            Me.columnusername.AllowDBNull = false
            Me.columnusername.MaxLength = 45
            Me.columnpassw.AllowDBNull = false
            Me.columnpassw.MaxLength = 45
            Me.columnrec_quest.AllowDBNull = false
            Me.columnrec_quest.MaxLength = 45
            Me.columnrec_answer.AllowDBNull = false
            Me.columnrec_answer.MaxLength = 45
            Me.columnlogo_filename.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewusersRow() As usersRow
            Return CType(Me.NewRow,usersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New usersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(usersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.usersRowChangedEvent) Is Nothing) Then
                RaiseEvent usersRowChanged(Me, New usersRowChangeEvent(CType(e.Row,usersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.usersRowChangingEvent) Is Nothing) Then
                RaiseEvent usersRowChanging(Me, New usersRowChangeEvent(CType(e.Row,usersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.usersRowDeletedEvent) Is Nothing) Then
                RaiseEvent usersRowDeleted(Me, New usersRowChangeEvent(CType(e.Row,usersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.usersRowDeletingEvent) Is Nothing) Then
                RaiseEvent usersRowDeleting(Me, New usersRowChangeEvent(CType(e.Row,usersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveusersRow(ByVal row As usersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _db_usedDataSet = New _db_usedDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "usersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class dokterRow
        Inherits Global.System.Data.DataRow
        
        Private tabledokter As dokterDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledokter = CType(Me.Table,dokterDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tabledokter.idColumn),Long)
            End Get
            Set
                Me(Me.tabledokter.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property nip() As String
            Get
                Return CType(Me(Me.tabledokter.nipColumn),String)
            End Get
            Set
                Me(Me.tabledokter.nipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property nama() As String
            Get
                Return CType(Me(Me.tabledokter.namaColumn),String)
            End Get
            Set
                Me(Me.tabledokter.namaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property kode() As String
            Get
                Return CType(Me(Me.tabledokter.kodeColumn),String)
            End Get
            Set
                Me(Me.tabledokter.kodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property spesialis() As String
            Get
                Return CType(Me(Me.tabledokter.spesialisColumn),String)
            End Get
            Set
                Me(Me.tabledokter.spesialisColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class history_pinjamRow
        Inherits Global.System.Data.DataRow
        
        Private tablehistory_pinjam As history_pinjamDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablehistory_pinjam = CType(Me.Table,history_pinjamDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tablehistory_pinjam.idColumn),Long)
            End Get
            Set
                Me(Me.tablehistory_pinjam.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property no_medrek() As String
            Get
                Return CType(Me(Me.tablehistory_pinjam.no_medrekColumn),String)
            End Get
            Set
                Me(Me.tablehistory_pinjam.no_medrekColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property nama_peminjam() As String
            Get
                Return CType(Me(Me.tablehistory_pinjam.nama_peminjamColumn),String)
            End Get
            Set
                Me(Me.tablehistory_pinjam.nama_peminjamColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property peran() As String
            Get
                Return CType(Me(Me.tablehistory_pinjam.peranColumn),String)
            End Get
            Set
                Me(Me.tablehistory_pinjam.peranColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tgl_pinjam() As String
            Get
                Try 
                    Return CType(Me(Me.tablehistory_pinjam.tgl_pinjamColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tgl_pinjam' in table 'history_pinjam' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehistory_pinjam.tgl_pinjamColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tgl_kembali() As String
            Get
                Try 
                    Return CType(Me(Me.tablehistory_pinjam.tgl_kembaliColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tgl_kembali' in table 'history_pinjam' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehistory_pinjam.tgl_kembaliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Istgl_pinjamNull() As Boolean
            Return Me.IsNull(Me.tablehistory_pinjam.tgl_pinjamColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Settgl_pinjamNull()
            Me(Me.tablehistory_pinjam.tgl_pinjamColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Istgl_kembaliNull() As Boolean
            Return Me.IsNull(Me.tablehistory_pinjam.tgl_kembaliColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Settgl_kembaliNull()
            Me(Me.tablehistory_pinjam.tgl_kembaliColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class kunjunganRow
        Inherits Global.System.Data.DataRow
        
        Private tablekunjungan As kunjunganDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablekunjungan = CType(Me.Table,kunjunganDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tablekunjungan.idColumn),Long)
            End Get
            Set
                Me(Me.tablekunjungan.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tgl_kunjungan() As String
            Get
                Try 
                    Return CType(Me(Me.tablekunjungan.tgl_kunjunganColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tgl_kunjungan' in table 'kunjungan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekunjungan.tgl_kunjunganColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property no_medrek() As String
            Get
                Try 
                    Return CType(Me(Me.tablekunjungan.no_medrekColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'no_medrek' in table 'kunjungan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekunjungan.no_medrekColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property nama() As String
            Get
                Try 
                    Return CType(Me(Me.tablekunjungan.namaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nama' in table 'kunjungan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekunjungan.namaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_pasien() As Long
            Get
                Try 
                    Return CType(Me(Me.tablekunjungan.id_pasienColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'id_pasien' in table 'kunjungan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekunjungan.id_pasienColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property keluhan() As String
            Get
                Try 
                    Return CType(Me(Me.tablekunjungan.keluhanColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'keluhan' in table 'kunjungan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekunjungan.keluhanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property diagnosa() As String
            Get
                Try 
                    Return CType(Me(Me.tablekunjungan.diagnosaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'diagnosa' in table 'kunjungan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekunjungan.diagnosaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tekanan_darah() As String
            Get
                Try 
                    Return CType(Me(Me.tablekunjungan.tekanan_darahColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tekanan_darah' in table 'kunjungan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekunjungan.tekanan_darahColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property berat_badan() As Long
            Get
                Try 
                    Return CType(Me(Me.tablekunjungan.berat_badanColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'berat_badan' in table 'kunjungan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekunjungan.berat_badanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tindakan() As String
            Get
                Try 
                    Return CType(Me(Me.tablekunjungan.tindakanColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tindakan' in table 'kunjungan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekunjungan.tindakanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property visite() As String
            Get
                Try 
                    Return CType(Me(Me.tablekunjungan.visiteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'visite' in table 'kunjungan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekunjungan.visiteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property kunjungan_lagi() As String
            Get
                Try 
                    Return CType(Me(Me.tablekunjungan.kunjungan_lagiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'kunjungan_lagi' in table 'kunjungan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekunjungan.kunjungan_lagiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Istgl_kunjunganNull() As Boolean
            Return Me.IsNull(Me.tablekunjungan.tgl_kunjunganColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Settgl_kunjunganNull()
            Me(Me.tablekunjungan.tgl_kunjunganColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isno_medrekNull() As Boolean
            Return Me.IsNull(Me.tablekunjungan.no_medrekColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setno_medrekNull()
            Me(Me.tablekunjungan.no_medrekColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsnamaNull() As Boolean
            Return Me.IsNull(Me.tablekunjungan.namaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetnamaNull()
            Me(Me.tablekunjungan.namaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isid_pasienNull() As Boolean
            Return Me.IsNull(Me.tablekunjungan.id_pasienColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setid_pasienNull()
            Me(Me.tablekunjungan.id_pasienColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IskeluhanNull() As Boolean
            Return Me.IsNull(Me.tablekunjungan.keluhanColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetkeluhanNull()
            Me(Me.tablekunjungan.keluhanColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsdiagnosaNull() As Boolean
            Return Me.IsNull(Me.tablekunjungan.diagnosaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetdiagnosaNull()
            Me(Me.tablekunjungan.diagnosaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Istekanan_darahNull() As Boolean
            Return Me.IsNull(Me.tablekunjungan.tekanan_darahColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Settekanan_darahNull()
            Me(Me.tablekunjungan.tekanan_darahColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isberat_badanNull() As Boolean
            Return Me.IsNull(Me.tablekunjungan.berat_badanColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setberat_badanNull()
            Me(Me.tablekunjungan.berat_badanColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IstindakanNull() As Boolean
            Return Me.IsNull(Me.tablekunjungan.tindakanColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SettindakanNull()
            Me(Me.tablekunjungan.tindakanColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsvisiteNull() As Boolean
            Return Me.IsNull(Me.tablekunjungan.visiteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetvisiteNull()
            Me(Me.tablekunjungan.visiteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Iskunjungan_lagiNull() As Boolean
            Return Me.IsNull(Me.tablekunjungan.kunjungan_lagiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setkunjungan_lagiNull()
            Me(Me.tablekunjungan.kunjungan_lagiColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class pasienRow
        Inherits Global.System.Data.DataRow
        
        Private tablepasien As pasienDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepasien = CType(Me.Table,pasienDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tablepasien.idColumn),Long)
            End Get
            Set
                Me(Me.tablepasien.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property no_medrek() As String
            Get
                Return CType(Me(Me.tablepasien.no_medrekColumn),String)
            End Get
            Set
                Me(Me.tablepasien.no_medrekColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property status() As String
            Get
                Return CType(Me(Me.tablepasien.statusColumn),String)
            End Get
            Set
                Me(Me.tablepasien.statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tgl_buat() As String
            Get
                Return CType(Me(Me.tablepasien.tgl_buatColumn),String)
            End Get
            Set
                Me(Me.tablepasien.tgl_buatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property nama() As String
            Get
                Return CType(Me(Me.tablepasien.namaColumn),String)
            End Get
            Set
                Me(Me.tablepasien.namaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tgl_lahir() As String
            Get
                Return CType(Me(Me.tablepasien.tgl_lahirColumn),String)
            End Get
            Set
                Me(Me.tablepasien.tgl_lahirColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tempat_lahir() As String
            Get
                Return CType(Me(Me.tablepasien.tempat_lahirColumn),String)
            End Get
            Set
                Me(Me.tablepasien.tempat_lahirColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property kelamin() As String
            Get
                Return CType(Me(Me.tablepasien.kelaminColumn),String)
            End Get
            Set
                Me(Me.tablepasien.kelaminColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property alamat() As String
            Get
                Return CType(Me(Me.tablepasien.alamatColumn),String)
            End Get
            Set
                Me(Me.tablepasien.alamatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property telp() As String
            Get
                Try 
                    Return CType(Me(Me.tablepasien.telpColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'telp' in table 'pasien' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepasien.telpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property total_kunjungan() As Long
            Get
                Try 
                    Return CType(Me(Me.tablepasien.total_kunjunganColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'total_kunjungan' in table 'pasien' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepasien.total_kunjunganColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property catatan() As String
            Get
                Try 
                    Return CType(Me(Me.tablepasien.catatanColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'catatan' in table 'pasien' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepasien.catatanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IstelpNull() As Boolean
            Return Me.IsNull(Me.tablepasien.telpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SettelpNull()
            Me(Me.tablepasien.telpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Istotal_kunjunganNull() As Boolean
            Return Me.IsNull(Me.tablepasien.total_kunjunganColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Settotal_kunjunganNull()
            Me(Me.tablepasien.total_kunjunganColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IscatatanNull() As Boolean
            Return Me.IsNull(Me.tablepasien.catatanColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetcatatanNull()
            Me(Me.tablepasien.catatanColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class penyimpananRow
        Inherits Global.System.Data.DataRow
        
        Private tablepenyimpanan As penyimpananDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepenyimpanan = CType(Me.Table,penyimpananDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tablepenyimpanan.idColumn),Long)
            End Get
            Set
                Me(Me.tablepenyimpanan.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property no_medrek() As String
            Get
                Return CType(Me(Me.tablepenyimpanan.no_medrekColumn),String)
            End Get
            Set
                Me(Me.tablepenyimpanan.no_medrekColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property nama() As String
            Get
                Return CType(Me(Me.tablepenyimpanan.namaColumn),String)
            End Get
            Set
                Me(Me.tablepenyimpanan.namaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tgl_simpan() As String
            Get
                Try 
                    Return CType(Me(Me.tablepenyimpanan.tgl_simpanColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tgl_simpan' in table 'penyimpanan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepenyimpanan.tgl_simpanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property lokasi_rak() As Long
            Get
                Try 
                    Return CType(Me(Me.tablepenyimpanan.lokasi_rakColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lokasi_rak' in table 'penyimpanan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepenyimpanan.lokasi_rakColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property status() As String
            Get
                Return CType(Me(Me.tablepenyimpanan.statusColumn),String)
            End Get
            Set
                Me(Me.tablepenyimpanan.statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property nama_petugas() As String
            Get
                Return CType(Me(Me.tablepenyimpanan.nama_petugasColumn),String)
            End Get
            Set
                Me(Me.tablepenyimpanan.nama_petugasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property nip_petugas() As String
            Get
                Return CType(Me(Me.tablepenyimpanan.nip_petugasColumn),String)
            End Get
            Set
                Me(Me.tablepenyimpanan.nip_petugasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property nama_dokter() As String
            Get
                Return CType(Me(Me.tablepenyimpanan.nama_dokterColumn),String)
            End Get
            Set
                Me(Me.tablepenyimpanan.nama_dokterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property nip_dokter() As String
            Get
                Return CType(Me(Me.tablepenyimpanan.nip_dokterColumn),String)
            End Get
            Set
                Me(Me.tablepenyimpanan.nip_dokterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tgl_pinjam() As String
            Get
                Try 
                    Return CType(Me(Me.tablepenyimpanan.tgl_pinjamColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tgl_pinjam' in table 'penyimpanan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepenyimpanan.tgl_pinjamColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tgl_kembali() As String
            Get
                Try 
                    Return CType(Me(Me.tablepenyimpanan.tgl_kembaliColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tgl_kembali' in table 'penyimpanan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepenyimpanan.tgl_kembaliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Istgl_simpanNull() As Boolean
            Return Me.IsNull(Me.tablepenyimpanan.tgl_simpanColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Settgl_simpanNull()
            Me(Me.tablepenyimpanan.tgl_simpanColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Islokasi_rakNull() As Boolean
            Return Me.IsNull(Me.tablepenyimpanan.lokasi_rakColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setlokasi_rakNull()
            Me(Me.tablepenyimpanan.lokasi_rakColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Istgl_pinjamNull() As Boolean
            Return Me.IsNull(Me.tablepenyimpanan.tgl_pinjamColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Settgl_pinjamNull()
            Me(Me.tablepenyimpanan.tgl_pinjamColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Istgl_kembaliNull() As Boolean
            Return Me.IsNull(Me.tablepenyimpanan.tgl_kembaliColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Settgl_kembaliNull()
            Me(Me.tablepenyimpanan.tgl_kembaliColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class petugasRow
        Inherits Global.System.Data.DataRow
        
        Private tablepetugas As petugasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepetugas = CType(Me.Table,petugasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tablepetugas.idColumn),Long)
            End Get
            Set
                Me(Me.tablepetugas.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property nip() As String
            Get
                Return CType(Me(Me.tablepetugas.nipColumn),String)
            End Get
            Set
                Me(Me.tablepetugas.nipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property nama() As String
            Get
                Return CType(Me(Me.tablepetugas.namaColumn),String)
            End Get
            Set
                Me(Me.tablepetugas.namaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property jabatan() As String
            Get
                Return CType(Me(Me.tablepetugas.jabatanColumn),String)
            End Get
            Set
                Me(Me.tablepetugas.jabatanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property telp() As String
            Get
                Return CType(Me(Me.tablepetugas.telpColumn),String)
            End Get
            Set
                Me(Me.tablepetugas.telpColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class poliklinikRow
        Inherits Global.System.Data.DataRow
        
        Private tablepoliklinik As poliklinikDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepoliklinik = CType(Me.Table,poliklinikDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tablepoliklinik.idColumn),Long)
            End Get
            Set
                Me(Me.tablepoliklinik.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property unit() As String
            Get
                Return CType(Me(Me.tablepoliklinik.unitColumn),String)
            End Get
            Set
                Me(Me.tablepoliklinik.unitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property dokter() As String
            Get
                Try 
                    Return CType(Me(Me.tablepoliklinik.dokterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dokter' in table 'poliklinik' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepoliklinik.dokterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property nama_petugas() As String
            Get
                Try 
                    Return CType(Me(Me.tablepoliklinik.nama_petugasColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nama_petugas' in table 'poliklinik' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepoliklinik.nama_petugasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsdokterNull() As Boolean
            Return Me.IsNull(Me.tablepoliklinik.dokterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetdokterNull()
            Me(Me.tablepoliklinik.dokterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isnama_petugasNull() As Boolean
            Return Me.IsNull(Me.tablepoliklinik.nama_petugasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setnama_petugasNull()
            Me(Me.tablepoliklinik.nama_petugasColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class usersRow
        Inherits Global.System.Data.DataRow
        
        Private tableusers As usersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableusers = CType(Me.Table,usersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tableusers.idColumn),Long)
            End Get
            Set
                Me(Me.tableusers.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property username() As String
            Get
                Return CType(Me(Me.tableusers.usernameColumn),String)
            End Get
            Set
                Me(Me.tableusers.usernameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property passw() As String
            Get
                Return CType(Me(Me.tableusers.passwColumn),String)
            End Get
            Set
                Me(Me.tableusers.passwColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property rec_quest() As String
            Get
                Return CType(Me(Me.tableusers.rec_questColumn),String)
            End Get
            Set
                Me(Me.tableusers.rec_questColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property rec_answer() As String
            Get
                Return CType(Me(Me.tableusers.rec_answerColumn),String)
            End Get
            Set
                Me(Me.tableusers.rec_answerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property logo_filename() As String
            Get
                Try 
                    Return CType(Me(Me.tableusers.logo_filenameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'logo_filename' in table 'users' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableusers.logo_filenameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property logo_content() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableusers.logo_contentColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'logo_content' in table 'users' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableusers.logo_contentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Islogo_filenameNull() As Boolean
            Return Me.IsNull(Me.tableusers.logo_filenameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setlogo_filenameNull()
            Me(Me.tableusers.logo_filenameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Islogo_contentNull() As Boolean
            Return Me.IsNull(Me.tableusers.logo_contentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setlogo_contentNull()
            Me(Me.tableusers.logo_contentColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class dokterRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dokterRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As dokterRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As dokterRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class history_pinjamRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As history_pinjamRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As history_pinjamRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As history_pinjamRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class kunjunganRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As kunjunganRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As kunjunganRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As kunjunganRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class pasienRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As pasienRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As pasienRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As pasienRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class penyimpananRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As penyimpananRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As penyimpananRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As penyimpananRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class petugasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As petugasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As petugasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As petugasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class poliklinikRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As poliklinikRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As poliklinikRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As poliklinikRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class usersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As usersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As usersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As usersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace _db_usedDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dokterTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dokter"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("nip", "nip")
            tableMapping.ColumnMappings.Add("nama", "nama")
            tableMapping.ColumnMappings.Add("kode", "kode")
            tableMapping.ColumnMappings.Add("spesialis", "spesialis")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[dokter] WHERE (([id] = @Original_id) "& _ 
                "AND ([nip] = @Original_nip) AND ([nama] = @Original_nama) AND ([kode] = @Origina"& _ 
                "l_kode) AND ([spesialis] = @Original_spesialis))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nip"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nip"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nama"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_kode"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "kode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_spesialis"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "spesialis"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[dokter] ([nip], [nama], [kode], [spes"& _ 
                "ialis]) VALUES (@nip, @nama, @kode, @spesialis)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nip"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nip"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nama"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@kode"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "kode"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@spesialis"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "spesialis"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[dokter] SET [nip] = @nip, [nama] = @nama, "& _ 
                "[kode] = @kode, [spesialis] = @spesialis WHERE (([id] = @Original_id) AND ([nip]"& _ 
                " = @Original_nip) AND ([nama] = @Original_nama) AND ([kode] = @Original_kode) AN"& _ 
                "D ([spesialis] = @Original_spesialis))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nip"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nip"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nama"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@kode"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "kode"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@spesialis"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "spesialis"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nip"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nip"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nama"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_kode"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "kode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_spesialis"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "spesialis"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.RKMedis.My.MySettings.Default.db_usedConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [id], [nip], [nama], [kode], [spesialis] FROM [dokter]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _db_usedDataSet.dokterDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _db_usedDataSet.dokterDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _db_usedDataSet.dokterDataTable = New _db_usedDataSet.dokterDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _db_usedDataSet.dokterDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _db_usedDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "dokter")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_nip As String, ByVal Original_nama As String, ByVal Original_kode As String, ByVal Original_spesialis As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_nip Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nip")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_nip,String)
            End If
            If (Original_nama Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nama")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_nama,String)
            End If
            If (Original_kode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_kode")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_kode,String)
            End If
            If (Original_spesialis Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_spesialis")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_spesialis,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal nip As String, ByVal nama As String, ByVal kode As String, ByVal spesialis As String) As Integer
            If (nip Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nip")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(nip,String)
            End If
            If (nama Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nama")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(nama,String)
            End If
            If (kode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("kode")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(kode,String)
            End If
            If (spesialis Is Nothing) Then
                Throw New Global.System.ArgumentNullException("spesialis")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(spesialis,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal nip As String, ByVal nama As String, ByVal kode As String, ByVal spesialis As String, ByVal Original_id As Long, ByVal Original_nip As String, ByVal Original_nama As String, ByVal Original_kode As String, ByVal Original_spesialis As String) As Integer
            If (nip Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nip")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(nip,String)
            End If
            If (nama Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nama")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nama,String)
            End If
            If (kode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("kode")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(kode,String)
            End If
            If (spesialis Is Nothing) Then
                Throw New Global.System.ArgumentNullException("spesialis")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(spesialis,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_id,Long)
            If (Original_nip Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nip")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_nip,String)
            End If
            If (Original_nama Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nama")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_nama,String)
            End If
            If (Original_kode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_kode")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_kode,String)
            End If
            If (Original_spesialis Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_spesialis")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_spesialis,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class history_pinjamTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "history_pinjam"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("no_medrek", "no_medrek")
            tableMapping.ColumnMappings.Add("nama_peminjam", "nama_peminjam")
            tableMapping.ColumnMappings.Add("peran", "peran")
            tableMapping.ColumnMappings.Add("tgl_pinjam", "tgl_pinjam")
            tableMapping.ColumnMappings.Add("tgl_kembali", "tgl_kembali")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[history_pinjam] WHERE (([id] = @Origi"& _ 
                "nal_id) AND ([no_medrek] = @Original_no_medrek) AND ([nama_peminjam] = @Original"& _ 
                "_nama_peminjam) AND ([peran] = @Original_peran) AND ((@IsNull_tgl_pinjam = 1 AND"& _ 
                " [tgl_pinjam] IS NULL) OR ([tgl_pinjam] = @Original_tgl_pinjam)) AND ((@IsNull_t"& _ 
                "gl_kembali = 1 AND [tgl_kembali] IS NULL) OR ([tgl_kembali] = @Original_tgl_kemb"& _ 
                "ali)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_no_medrek"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "no_medrek"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nama_peminjam"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama_peminjam"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_peran"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "peran"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_tgl_pinjam"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "tgl_pinjam"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tgl_pinjam"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_pinjam"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_tgl_kembali"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "tgl_kembali"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tgl_kembali"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_kembali"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[history_pinjam] ([no_medrek], [nama_p"& _ 
                "eminjam], [peran], [tgl_pinjam], [tgl_kembali]) VALUES (@no_medrek, @nama_peminj"& _ 
                "am, @peran, @tgl_pinjam, @tgl_kembali)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@no_medrek"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "no_medrek"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nama_peminjam"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama_peminjam"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@peran"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "peran"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tgl_pinjam"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_pinjam"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tgl_kembali"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_kembali"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[history_pinjam] SET [no_medrek] = @no_medr"& _ 
                "ek, [nama_peminjam] = @nama_peminjam, [peran] = @peran, [tgl_pinjam] = @tgl_pinj"& _ 
                "am, [tgl_kembali] = @tgl_kembali WHERE (([id] = @Original_id) AND ([no_medrek] ="& _ 
                " @Original_no_medrek) AND ([nama_peminjam] = @Original_nama_peminjam) AND ([pera"& _ 
                "n] = @Original_peran) AND ((@IsNull_tgl_pinjam = 1 AND [tgl_pinjam] IS NULL) OR "& _ 
                "([tgl_pinjam] = @Original_tgl_pinjam)) AND ((@IsNull_tgl_kembali = 1 AND [tgl_ke"& _ 
                "mbali] IS NULL) OR ([tgl_kembali] = @Original_tgl_kembali)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@no_medrek"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "no_medrek"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nama_peminjam"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama_peminjam"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@peran"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "peran"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tgl_pinjam"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_pinjam"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tgl_kembali"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_kembali"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_no_medrek"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "no_medrek"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nama_peminjam"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama_peminjam"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_peran"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "peran"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_tgl_pinjam"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "tgl_pinjam"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tgl_pinjam"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_pinjam"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_tgl_kembali"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "tgl_kembali"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tgl_kembali"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_kembali"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.RKMedis.My.MySettings.Default.db_usedConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [id], [no_medrek], [nama_peminjam], [peran], [tgl_pinjam], [tgl_kembali] F"& _ 
                "ROM [history_pinjam]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _db_usedDataSet.history_pinjamDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _db_usedDataSet.history_pinjamDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _db_usedDataSet.history_pinjamDataTable = New _db_usedDataSet.history_pinjamDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _db_usedDataSet.history_pinjamDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _db_usedDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "history_pinjam")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_no_medrek As String, ByVal Original_nama_peminjam As String, ByVal Original_peran As String, ByVal Original_tgl_pinjam As String, ByVal Original_tgl_kembali As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_no_medrek Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_no_medrek")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_no_medrek,String)
            End If
            If (Original_nama_peminjam Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nama_peminjam")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_nama_peminjam,String)
            End If
            If (Original_peran Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_peran")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_peran,String)
            End If
            If (Original_tgl_pinjam Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_tgl_pinjam,String)
            End If
            If (Original_tgl_kembali Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_tgl_kembali,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal no_medrek As String, ByVal nama_peminjam As String, ByVal peran As String, ByVal tgl_pinjam As String, ByVal tgl_kembali As String) As Integer
            If (no_medrek Is Nothing) Then
                Throw New Global.System.ArgumentNullException("no_medrek")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(no_medrek,String)
            End If
            If (nama_peminjam Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nama_peminjam")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(nama_peminjam,String)
            End If
            If (peran Is Nothing) Then
                Throw New Global.System.ArgumentNullException("peran")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(peran,String)
            End If
            If (tgl_pinjam Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(tgl_pinjam,String)
            End If
            If (tgl_kembali Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(tgl_kembali,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal no_medrek As String, ByVal nama_peminjam As String, ByVal peran As String, ByVal tgl_pinjam As String, ByVal tgl_kembali As String, ByVal Original_id As Long, ByVal Original_no_medrek As String, ByVal Original_nama_peminjam As String, ByVal Original_peran As String, ByVal Original_tgl_pinjam As String, ByVal Original_tgl_kembali As String) As Integer
            If (no_medrek Is Nothing) Then
                Throw New Global.System.ArgumentNullException("no_medrek")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(no_medrek,String)
            End If
            If (nama_peminjam Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nama_peminjam")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nama_peminjam,String)
            End If
            If (peran Is Nothing) Then
                Throw New Global.System.ArgumentNullException("peran")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(peran,String)
            End If
            If (tgl_pinjam Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(tgl_pinjam,String)
            End If
            If (tgl_kembali Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(tgl_kembali,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_id,Long)
            If (Original_no_medrek Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_no_medrek")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_no_medrek,String)
            End If
            If (Original_nama_peminjam Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nama_peminjam")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_nama_peminjam,String)
            End If
            If (Original_peran Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_peran")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_peran,String)
            End If
            If (Original_tgl_pinjam Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_tgl_pinjam,String)
            End If
            If (Original_tgl_kembali Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_tgl_kembali,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class kunjunganTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "kunjungan"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("tgl_kunjungan", "tgl_kunjungan")
            tableMapping.ColumnMappings.Add("no_medrek", "no_medrek")
            tableMapping.ColumnMappings.Add("nama", "nama")
            tableMapping.ColumnMappings.Add("id_pasien", "id_pasien")
            tableMapping.ColumnMappings.Add("keluhan", "keluhan")
            tableMapping.ColumnMappings.Add("diagnosa", "diagnosa")
            tableMapping.ColumnMappings.Add("tekanan_darah", "tekanan_darah")
            tableMapping.ColumnMappings.Add("berat_badan", "berat_badan")
            tableMapping.ColumnMappings.Add("tindakan", "tindakan")
            tableMapping.ColumnMappings.Add("visite", "visite")
            tableMapping.ColumnMappings.Add("kunjungan_lagi", "kunjungan_lagi")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[kunjungan] WHERE (([id] = @Original_i"& _ 
                "d) AND ((@IsNull_tgl_kunjungan = 1 AND [tgl_kunjungan] IS NULL) OR ([tgl_kunjung"& _ 
                "an] = @Original_tgl_kunjungan)) AND ((@IsNull_no_medrek = 1 AND [no_medrek] IS N"& _ 
                "ULL) OR ([no_medrek] = @Original_no_medrek)) AND ((@IsNull_nama = 1 AND [nama] I"& _ 
                "S NULL) OR ([nama] = @Original_nama)) AND ((@IsNull_id_pasien = 1 AND [id_pasien"& _ 
                "] IS NULL) OR ([id_pasien] = @Original_id_pasien)) AND ((@IsNull_keluhan = 1 AND"& _ 
                " [keluhan] IS NULL) OR ([keluhan] = @Original_keluhan)) AND ((@IsNull_diagnosa ="& _ 
                " 1 AND [diagnosa] IS NULL) OR ([diagnosa] = @Original_diagnosa)) AND ((@IsNull_t"& _ 
                "ekanan_darah = 1 AND [tekanan_darah] IS NULL) OR ([tekanan_darah] = @Original_te"& _ 
                "kanan_darah)) AND ((@IsNull_berat_badan = 1 AND [berat_badan] IS NULL) OR ([bera"& _ 
                "t_badan] = @Original_berat_badan)) AND ((@IsNull_tindakan = 1 AND [tindakan] IS "& _ 
                "NULL) OR ([tindakan] = @Original_tindakan)) AND ((@IsNull_visite = 1 AND [visite"& _ 
                "] IS NULL) OR ([visite] = @Original_visite)) AND ((@IsNull_kunjungan_lagi = 1 AN"& _ 
                "D [kunjungan_lagi] IS NULL) OR ([kunjungan_lagi] = @Original_kunjungan_lagi)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_tgl_kunjungan"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "tgl_kunjungan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tgl_kunjungan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_kunjungan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_no_medrek"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "no_medrek"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_no_medrek"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "no_medrek"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_nama"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "nama"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nama"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_id_pasien"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "id_pasien"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_pasien"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_pasien"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_keluhan"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "keluhan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_keluhan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "keluhan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_diagnosa"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "diagnosa"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_diagnosa"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "diagnosa"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_tekanan_darah"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "tekanan_darah"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tekanan_darah"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tekanan_darah"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_berat_badan"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "berat_badan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_berat_badan"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "berat_badan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_tindakan"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "tindakan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tindakan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tindakan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_visite"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "visite"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_visite"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "visite"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_kunjungan_lagi"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "kunjungan_lagi"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_kunjungan_lagi"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "kunjungan_lagi"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[kunjungan] ([tgl_kunjungan], [no_medr"& _ 
                "ek], [nama], [id_pasien], [keluhan], [diagnosa], [tekanan_darah], [berat_badan],"& _ 
                " [tindakan], [visite], [kunjungan_lagi]) VALUES (@tgl_kunjungan, @no_medrek, @na"& _ 
                "ma, @id_pasien, @keluhan, @diagnosa, @tekanan_darah, @berat_badan, @tindakan, @v"& _ 
                "isite, @kunjungan_lagi)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tgl_kunjungan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_kunjungan"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@no_medrek"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "no_medrek"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nama"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_pasien"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_pasien"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@keluhan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "keluhan"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@diagnosa"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "diagnosa"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tekanan_darah"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tekanan_darah"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@berat_badan"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "berat_badan"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tindakan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tindakan"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@visite"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "visite"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@kunjungan_lagi"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "kunjungan_lagi"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[kunjungan] SET [tgl_kunjungan] = @tgl_kunj"& _ 
                "ungan, [no_medrek] = @no_medrek, [nama] = @nama, [id_pasien] = @id_pasien, [kelu"& _ 
                "han] = @keluhan, [diagnosa] = @diagnosa, [tekanan_darah] = @tekanan_darah, [bera"& _ 
                "t_badan] = @berat_badan, [tindakan] = @tindakan, [visite] = @visite, [kunjungan_"& _ 
                "lagi] = @kunjungan_lagi WHERE (([id] = @Original_id) AND ((@IsNull_tgl_kunjungan"& _ 
                " = 1 AND [tgl_kunjungan] IS NULL) OR ([tgl_kunjungan] = @Original_tgl_kunjungan)"& _ 
                ") AND ((@IsNull_no_medrek = 1 AND [no_medrek] IS NULL) OR ([no_medrek] = @Origin"& _ 
                "al_no_medrek)) AND ((@IsNull_nama = 1 AND [nama] IS NULL) OR ([nama] = @Original"& _ 
                "_nama)) AND ((@IsNull_id_pasien = 1 AND [id_pasien] IS NULL) OR ([id_pasien] = @"& _ 
                "Original_id_pasien)) AND ((@IsNull_keluhan = 1 AND [keluhan] IS NULL) OR ([keluh"& _ 
                "an] = @Original_keluhan)) AND ((@IsNull_diagnosa = 1 AND [diagnosa] IS NULL) OR "& _ 
                "([diagnosa] = @Original_diagnosa)) AND ((@IsNull_tekanan_darah = 1 AND [tekanan_"& _ 
                "darah] IS NULL) OR ([tekanan_darah] = @Original_tekanan_darah)) AND ((@IsNull_be"& _ 
                "rat_badan = 1 AND [berat_badan] IS NULL) OR ([berat_badan] = @Original_berat_bad"& _ 
                "an)) AND ((@IsNull_tindakan = 1 AND [tindakan] IS NULL) OR ([tindakan] = @Origin"& _ 
                "al_tindakan)) AND ((@IsNull_visite = 1 AND [visite] IS NULL) OR ([visite] = @Ori"& _ 
                "ginal_visite)) AND ((@IsNull_kunjungan_lagi = 1 AND [kunjungan_lagi] IS NULL) OR"& _ 
                " ([kunjungan_lagi] = @Original_kunjungan_lagi)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tgl_kunjungan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_kunjungan"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@no_medrek"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "no_medrek"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nama"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_pasien"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_pasien"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@keluhan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "keluhan"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@diagnosa"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "diagnosa"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tekanan_darah"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tekanan_darah"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@berat_badan"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "berat_badan"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tindakan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tindakan"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@visite"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "visite"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@kunjungan_lagi"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "kunjungan_lagi"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_tgl_kunjungan"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "tgl_kunjungan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tgl_kunjungan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_kunjungan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_no_medrek"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "no_medrek"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_no_medrek"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "no_medrek"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_nama"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "nama"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nama"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_id_pasien"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "id_pasien"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_pasien"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_pasien"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_keluhan"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "keluhan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_keluhan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "keluhan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_diagnosa"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "diagnosa"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_diagnosa"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "diagnosa"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_tekanan_darah"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "tekanan_darah"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tekanan_darah"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tekanan_darah"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_berat_badan"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "berat_badan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_berat_badan"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "berat_badan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_tindakan"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "tindakan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tindakan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tindakan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_visite"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "visite"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_visite"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "visite"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_kunjungan_lagi"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "kunjungan_lagi"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_kunjungan_lagi"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "kunjungan_lagi"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.RKMedis.My.MySettings.Default.db_usedConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [id], [tgl_kunjungan], [no_medrek], [nama], [id_pasien], [keluhan], [diagn"& _ 
                "osa], [tekanan_darah], [berat_badan], [tindakan], [visite], [kunjungan_lagi] FRO"& _ 
                "M [kunjungan]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _db_usedDataSet.kunjunganDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _db_usedDataSet.kunjunganDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _db_usedDataSet.kunjunganDataTable = New _db_usedDataSet.kunjunganDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _db_usedDataSet.kunjunganDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _db_usedDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "kunjungan")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_tgl_kunjungan As String, ByVal Original_no_medrek As String, ByVal Original_nama As String, ByVal Original_id_pasien As Global.System.Nullable(Of Long), ByVal Original_keluhan As String, ByVal Original_diagnosa As String, ByVal Original_tekanan_darah As String, ByVal Original_berat_badan As Global.System.Nullable(Of Long), ByVal Original_tindakan As String, ByVal Original_visite As String, ByVal Original_kunjungan_lagi As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_tgl_kunjungan Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_tgl_kunjungan,String)
            End If
            If (Original_no_medrek Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_no_medrek,String)
            End If
            If (Original_nama Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_nama,String)
            End If
            If (Original_id_pasien.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_id_pasien.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_keluhan Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_keluhan,String)
            End If
            If (Original_diagnosa Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_diagnosa,String)
            End If
            If (Original_tekanan_darah Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_tekanan_darah,String)
            End If
            If (Original_berat_badan.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_berat_badan.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_tindakan Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_tindakan,String)
            End If
            If (Original_visite Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_visite,String)
            End If
            If (Original_kunjungan_lagi Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_kunjungan_lagi,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal tgl_kunjungan As String, ByVal no_medrek As String, ByVal nama As String, ByVal id_pasien As Global.System.Nullable(Of Long), ByVal keluhan As String, ByVal diagnosa As String, ByVal tekanan_darah As String, ByVal berat_badan As Global.System.Nullable(Of Long), ByVal tindakan As String, ByVal visite As String, ByVal kunjungan_lagi As String) As Integer
            If (tgl_kunjungan Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(tgl_kunjungan,String)
            End If
            If (no_medrek Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(no_medrek,String)
            End If
            If (nama Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(nama,String)
            End If
            If (id_pasien.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(id_pasien.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (keluhan Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(keluhan,String)
            End If
            If (diagnosa Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(diagnosa,String)
            End If
            If (tekanan_darah Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(tekanan_darah,String)
            End If
            If (berat_badan.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(berat_badan.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (tindakan Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(tindakan,String)
            End If
            If (visite Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(visite,String)
            End If
            If (kunjungan_lagi Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(kunjungan_lagi,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal tgl_kunjungan As String,  _
                    ByVal no_medrek As String,  _
                    ByVal nama As String,  _
                    ByVal id_pasien As Global.System.Nullable(Of Long),  _
                    ByVal keluhan As String,  _
                    ByVal diagnosa As String,  _
                    ByVal tekanan_darah As String,  _
                    ByVal berat_badan As Global.System.Nullable(Of Long),  _
                    ByVal tindakan As String,  _
                    ByVal visite As String,  _
                    ByVal kunjungan_lagi As String,  _
                    ByVal Original_id As Long,  _
                    ByVal Original_tgl_kunjungan As String,  _
                    ByVal Original_no_medrek As String,  _
                    ByVal Original_nama As String,  _
                    ByVal Original_id_pasien As Global.System.Nullable(Of Long),  _
                    ByVal Original_keluhan As String,  _
                    ByVal Original_diagnosa As String,  _
                    ByVal Original_tekanan_darah As String,  _
                    ByVal Original_berat_badan As Global.System.Nullable(Of Long),  _
                    ByVal Original_tindakan As String,  _
                    ByVal Original_visite As String,  _
                    ByVal Original_kunjungan_lagi As String) As Integer
            If (tgl_kunjungan Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(tgl_kunjungan,String)
            End If
            If (no_medrek Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(no_medrek,String)
            End If
            If (nama Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(nama,String)
            End If
            If (id_pasien.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(id_pasien.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (keluhan Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(keluhan,String)
            End If
            If (diagnosa Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(diagnosa,String)
            End If
            If (tekanan_darah Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(tekanan_darah,String)
            End If
            If (berat_badan.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(berat_badan.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (tindakan Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(tindakan,String)
            End If
            If (visite Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(visite,String)
            End If
            If (kunjungan_lagi Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(kunjungan_lagi,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_id,Long)
            If (Original_tgl_kunjungan Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_tgl_kunjungan,String)
            End If
            If (Original_no_medrek Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_no_medrek,String)
            End If
            If (Original_nama Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_nama,String)
            End If
            If (Original_id_pasien.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_id_pasien.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_keluhan Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_keluhan,String)
            End If
            If (Original_diagnosa Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_diagnosa,String)
            End If
            If (Original_tekanan_darah Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_tekanan_darah,String)
            End If
            If (Original_berat_badan.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_berat_badan.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_tindakan Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_tindakan,String)
            End If
            If (Original_visite Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_visite,String)
            End If
            If (Original_kunjungan_lagi Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_kunjungan_lagi,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class pasienTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "pasien"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("no_medrek", "no_medrek")
            tableMapping.ColumnMappings.Add("status", "status")
            tableMapping.ColumnMappings.Add("tgl_buat", "tgl_buat")
            tableMapping.ColumnMappings.Add("nama", "nama")
            tableMapping.ColumnMappings.Add("tgl_lahir", "tgl_lahir")
            tableMapping.ColumnMappings.Add("tempat_lahir", "tempat_lahir")
            tableMapping.ColumnMappings.Add("kelamin", "kelamin")
            tableMapping.ColumnMappings.Add("alamat", "alamat")
            tableMapping.ColumnMappings.Add("telp", "telp")
            tableMapping.ColumnMappings.Add("total_kunjungan", "total_kunjungan")
            tableMapping.ColumnMappings.Add("catatan", "catatan")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[pasien] WHERE (([id] = @Original_id) "& _ 
                "AND ([no_medrek] = @Original_no_medrek) AND ([status] = @Original_status) AND (["& _ 
                "tgl_buat] = @Original_tgl_buat) AND ([nama] = @Original_nama) AND ([tgl_lahir] ="& _ 
                " @Original_tgl_lahir) AND ([tempat_lahir] = @Original_tempat_lahir) AND ([kelami"& _ 
                "n] = @Original_kelamin) AND ([alamat] = @Original_alamat) AND ((@IsNull_telp = 1"& _ 
                " AND [telp] IS NULL) OR ([telp] = @Original_telp)) AND ((@IsNull_total_kunjungan"& _ 
                " = 1 AND [total_kunjungan] IS NULL) OR ([total_kunjungan] = @Original_total_kunj"& _ 
                "ungan)) AND ((@IsNull_catatan = 1 AND [catatan] IS NULL) OR ([catatan] = @Origin"& _ 
                "al_catatan)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_no_medrek"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "no_medrek"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_status"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "status"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tgl_buat"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_buat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nama"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tgl_lahir"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_lahir"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tempat_lahir"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tempat_lahir"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_kelamin"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "kelamin"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_alamat"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "alamat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_telp"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "telp"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_telp"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "telp"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_total_kunjungan"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "total_kunjungan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_total_kunjungan"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "total_kunjungan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_catatan"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "catatan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_catatan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "catatan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[pasien] ([no_medrek], [status], [tgl_"& _ 
                "buat], [nama], [tgl_lahir], [tempat_lahir], [kelamin], [alamat], [telp], [total_"& _ 
                "kunjungan], [catatan]) VALUES (@no_medrek, @status, @tgl_buat, @nama, @tgl_lahir"& _ 
                ", @tempat_lahir, @kelamin, @alamat, @telp, @total_kunjungan, @catatan)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@no_medrek"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "no_medrek"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@status"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "status"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tgl_buat"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_buat"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nama"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tgl_lahir"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_lahir"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tempat_lahir"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tempat_lahir"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@kelamin"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "kelamin"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@alamat"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "alamat"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@telp"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "telp"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@total_kunjungan"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "total_kunjungan"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@catatan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "catatan"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[pasien] SET [no_medrek] = @no_medrek, [sta"& _ 
                "tus] = @status, [tgl_buat] = @tgl_buat, [nama] = @nama, [tgl_lahir] = @tgl_lahir"& _ 
                ", [tempat_lahir] = @tempat_lahir, [kelamin] = @kelamin, [alamat] = @alamat, [tel"& _ 
                "p] = @telp, [total_kunjungan] = @total_kunjungan, [catatan] = @catatan WHERE ((["& _ 
                "id] = @Original_id) AND ([no_medrek] = @Original_no_medrek) AND ([status] = @Ori"& _ 
                "ginal_status) AND ([tgl_buat] = @Original_tgl_buat) AND ([nama] = @Original_nama"& _ 
                ") AND ([tgl_lahir] = @Original_tgl_lahir) AND ([tempat_lahir] = @Original_tempat"& _ 
                "_lahir) AND ([kelamin] = @Original_kelamin) AND ([alamat] = @Original_alamat) AN"& _ 
                "D ((@IsNull_telp = 1 AND [telp] IS NULL) OR ([telp] = @Original_telp)) AND ((@Is"& _ 
                "Null_total_kunjungan = 1 AND [total_kunjungan] IS NULL) OR ([total_kunjungan] = "& _ 
                "@Original_total_kunjungan)) AND ((@IsNull_catatan = 1 AND [catatan] IS NULL) OR "& _ 
                "([catatan] = @Original_catatan)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@no_medrek"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "no_medrek"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@status"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "status"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tgl_buat"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_buat"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nama"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tgl_lahir"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_lahir"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tempat_lahir"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tempat_lahir"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@kelamin"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "kelamin"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@alamat"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "alamat"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@telp"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "telp"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@total_kunjungan"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "total_kunjungan"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@catatan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "catatan"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_no_medrek"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "no_medrek"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_status"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "status"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tgl_buat"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_buat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nama"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tgl_lahir"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_lahir"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tempat_lahir"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tempat_lahir"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_kelamin"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "kelamin"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_alamat"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "alamat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_telp"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "telp"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_telp"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "telp"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_total_kunjungan"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "total_kunjungan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_total_kunjungan"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "total_kunjungan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_catatan"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "catatan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_catatan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "catatan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.RKMedis.My.MySettings.Default.db_usedConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [id], [no_medrek], [status], [tgl_buat], [nama], [tgl_lahir], [tempat_lahi"& _ 
                "r], [kelamin], [alamat], [telp], [total_kunjungan], [catatan] FROM [pasien]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _db_usedDataSet.pasienDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _db_usedDataSet.pasienDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _db_usedDataSet.pasienDataTable = New _db_usedDataSet.pasienDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _db_usedDataSet.pasienDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _db_usedDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "pasien")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_no_medrek As String, ByVal Original_status As String, ByVal Original_tgl_buat As String, ByVal Original_nama As String, ByVal Original_tgl_lahir As String, ByVal Original_tempat_lahir As String, ByVal Original_kelamin As String, ByVal Original_alamat As String, ByVal Original_telp As String, ByVal Original_total_kunjungan As Global.System.Nullable(Of Long), ByVal Original_catatan As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_no_medrek Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_no_medrek")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_no_medrek,String)
            End If
            If (Original_status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_status")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_status,String)
            End If
            If (Original_tgl_buat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tgl_buat")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_tgl_buat,String)
            End If
            If (Original_nama Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nama")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_nama,String)
            End If
            If (Original_tgl_lahir Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tgl_lahir")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_tgl_lahir,String)
            End If
            If (Original_tempat_lahir Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tempat_lahir")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_tempat_lahir,String)
            End If
            If (Original_kelamin Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_kelamin")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_kelamin,String)
            End If
            If (Original_alamat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_alamat")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_alamat,String)
            End If
            If (Original_telp Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_telp,String)
            End If
            If (Original_total_kunjungan.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_total_kunjungan.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_catatan Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_catatan,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal no_medrek As String, ByVal status As String, ByVal tgl_buat As String, ByVal nama As String, ByVal tgl_lahir As String, ByVal tempat_lahir As String, ByVal kelamin As String, ByVal alamat As String, ByVal telp As String, ByVal total_kunjungan As Global.System.Nullable(Of Long), ByVal catatan As String) As Integer
            If (no_medrek Is Nothing) Then
                Throw New Global.System.ArgumentNullException("no_medrek")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(no_medrek,String)
            End If
            If (status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("status")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(status,String)
            End If
            If (tgl_buat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tgl_buat")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(tgl_buat,String)
            End If
            If (nama Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nama")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(nama,String)
            End If
            If (tgl_lahir Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tgl_lahir")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(tgl_lahir,String)
            End If
            If (tempat_lahir Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tempat_lahir")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(tempat_lahir,String)
            End If
            If (kelamin Is Nothing) Then
                Throw New Global.System.ArgumentNullException("kelamin")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(kelamin,String)
            End If
            If (alamat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("alamat")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(alamat,String)
            End If
            If (telp Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(telp,String)
            End If
            If (total_kunjungan.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(total_kunjungan.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (catatan Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(catatan,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal no_medrek As String,  _
                    ByVal status As String,  _
                    ByVal tgl_buat As String,  _
                    ByVal nama As String,  _
                    ByVal tgl_lahir As String,  _
                    ByVal tempat_lahir As String,  _
                    ByVal kelamin As String,  _
                    ByVal alamat As String,  _
                    ByVal telp As String,  _
                    ByVal total_kunjungan As Global.System.Nullable(Of Long),  _
                    ByVal catatan As String,  _
                    ByVal Original_id As Long,  _
                    ByVal Original_no_medrek As String,  _
                    ByVal Original_status As String,  _
                    ByVal Original_tgl_buat As String,  _
                    ByVal Original_nama As String,  _
                    ByVal Original_tgl_lahir As String,  _
                    ByVal Original_tempat_lahir As String,  _
                    ByVal Original_kelamin As String,  _
                    ByVal Original_alamat As String,  _
                    ByVal Original_telp As String,  _
                    ByVal Original_total_kunjungan As Global.System.Nullable(Of Long),  _
                    ByVal Original_catatan As String) As Integer
            If (no_medrek Is Nothing) Then
                Throw New Global.System.ArgumentNullException("no_medrek")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(no_medrek,String)
            End If
            If (status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("status")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(status,String)
            End If
            If (tgl_buat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tgl_buat")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(tgl_buat,String)
            End If
            If (nama Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nama")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(nama,String)
            End If
            If (tgl_lahir Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tgl_lahir")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(tgl_lahir,String)
            End If
            If (tempat_lahir Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tempat_lahir")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(tempat_lahir,String)
            End If
            If (kelamin Is Nothing) Then
                Throw New Global.System.ArgumentNullException("kelamin")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(kelamin,String)
            End If
            If (alamat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("alamat")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(alamat,String)
            End If
            If (telp Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(telp,String)
            End If
            If (total_kunjungan.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(total_kunjungan.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (catatan Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(catatan,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_id,Long)
            If (Original_no_medrek Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_no_medrek")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_no_medrek,String)
            End If
            If (Original_status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_status")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_status,String)
            End If
            If (Original_tgl_buat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tgl_buat")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_tgl_buat,String)
            End If
            If (Original_nama Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nama")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_nama,String)
            End If
            If (Original_tgl_lahir Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tgl_lahir")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_tgl_lahir,String)
            End If
            If (Original_tempat_lahir Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tempat_lahir")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_tempat_lahir,String)
            End If
            If (Original_kelamin Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_kelamin")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_kelamin,String)
            End If
            If (Original_alamat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_alamat")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_alamat,String)
            End If
            If (Original_telp Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_telp,String)
            End If
            If (Original_total_kunjungan.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_total_kunjungan.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_catatan Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_catatan,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class penyimpananTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "penyimpanan"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("no_medrek", "no_medrek")
            tableMapping.ColumnMappings.Add("nama", "nama")
            tableMapping.ColumnMappings.Add("tgl_simpan", "tgl_simpan")
            tableMapping.ColumnMappings.Add("lokasi_rak", "lokasi_rak")
            tableMapping.ColumnMappings.Add("status", "status")
            tableMapping.ColumnMappings.Add("nama_petugas", "nama_petugas")
            tableMapping.ColumnMappings.Add("nip_petugas", "nip_petugas")
            tableMapping.ColumnMappings.Add("nama_dokter", "nama_dokter")
            tableMapping.ColumnMappings.Add("nip_dokter", "nip_dokter")
            tableMapping.ColumnMappings.Add("tgl_pinjam", "tgl_pinjam")
            tableMapping.ColumnMappings.Add("tgl_kembali", "tgl_kembali")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[penyimpanan] WHERE (([id] = @Original"& _ 
                "_id) AND ([no_medrek] = @Original_no_medrek) AND ([nama] = @Original_nama) AND ("& _ 
                "(@IsNull_tgl_simpan = 1 AND [tgl_simpan] IS NULL) OR ([tgl_simpan] = @Original_t"& _ 
                "gl_simpan)) AND ((@IsNull_lokasi_rak = 1 AND [lokasi_rak] IS NULL) OR ([lokasi_r"& _ 
                "ak] = @Original_lokasi_rak)) AND ([status] = @Original_status) AND ([nama_petuga"& _ 
                "s] = @Original_nama_petugas) AND ([nip_petugas] = @Original_nip_petugas) AND ([n"& _ 
                "ama_dokter] = @Original_nama_dokter) AND ([nip_dokter] = @Original_nip_dokter) A"& _ 
                "ND ((@IsNull_tgl_pinjam = 1 AND [tgl_pinjam] IS NULL) OR ([tgl_pinjam] = @Origin"& _ 
                "al_tgl_pinjam)) AND ((@IsNull_tgl_kembali = 1 AND [tgl_kembali] IS NULL) OR ([tg"& _ 
                "l_kembali] = @Original_tgl_kembali)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_no_medrek"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "no_medrek"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nama"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_tgl_simpan"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "tgl_simpan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tgl_simpan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_simpan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_lokasi_rak"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "lokasi_rak"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_lokasi_rak"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "lokasi_rak"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_status"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "status"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nama_petugas"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama_petugas"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nip_petugas"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nip_petugas"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nama_dokter"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama_dokter"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nip_dokter"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nip_dokter"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_tgl_pinjam"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "tgl_pinjam"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tgl_pinjam"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_pinjam"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_tgl_kembali"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "tgl_kembali"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tgl_kembali"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_kembali"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[penyimpanan] ([no_medrek], [nama], [t"& _ 
                "gl_simpan], [lokasi_rak], [status], [nama_petugas], [nip_petugas], [nama_dokter]"& _ 
                ", [nip_dokter], [tgl_pinjam], [tgl_kembali]) VALUES (@no_medrek, @nama, @tgl_sim"& _ 
                "pan, @lokasi_rak, @status, @nama_petugas, @nip_petugas, @nama_dokter, @nip_dokte"& _ 
                "r, @tgl_pinjam, @tgl_kembali)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@no_medrek"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "no_medrek"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nama"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tgl_simpan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_simpan"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@lokasi_rak"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "lokasi_rak"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@status"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "status"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nama_petugas"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama_petugas"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nip_petugas"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nip_petugas"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nama_dokter"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama_dokter"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nip_dokter"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nip_dokter"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tgl_pinjam"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_pinjam"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tgl_kembali"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_kembali"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[penyimpanan] SET [no_medrek] = @no_medrek,"& _ 
                " [nama] = @nama, [tgl_simpan] = @tgl_simpan, [lokasi_rak] = @lokasi_rak, [status"& _ 
                "] = @status, [nama_petugas] = @nama_petugas, [nip_petugas] = @nip_petugas, [nama"& _ 
                "_dokter] = @nama_dokter, [nip_dokter] = @nip_dokter, [tgl_pinjam] = @tgl_pinjam,"& _ 
                " [tgl_kembali] = @tgl_kembali WHERE (([id] = @Original_id) AND ([no_medrek] = @O"& _ 
                "riginal_no_medrek) AND ([nama] = @Original_nama) AND ((@IsNull_tgl_simpan = 1 AN"& _ 
                "D [tgl_simpan] IS NULL) OR ([tgl_simpan] = @Original_tgl_simpan)) AND ((@IsNull_"& _ 
                "lokasi_rak = 1 AND [lokasi_rak] IS NULL) OR ([lokasi_rak] = @Original_lokasi_rak"& _ 
                ")) AND ([status] = @Original_status) AND ([nama_petugas] = @Original_nama_petuga"& _ 
                "s) AND ([nip_petugas] = @Original_nip_petugas) AND ([nama_dokter] = @Original_na"& _ 
                "ma_dokter) AND ([nip_dokter] = @Original_nip_dokter) AND ((@IsNull_tgl_pinjam = "& _ 
                "1 AND [tgl_pinjam] IS NULL) OR ([tgl_pinjam] = @Original_tgl_pinjam)) AND ((@IsN"& _ 
                "ull_tgl_kembali = 1 AND [tgl_kembali] IS NULL) OR ([tgl_kembali] = @Original_tgl"& _ 
                "_kembali)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@no_medrek"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "no_medrek"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nama"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tgl_simpan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_simpan"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@lokasi_rak"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "lokasi_rak"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@status"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "status"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nama_petugas"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama_petugas"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nip_petugas"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nip_petugas"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nama_dokter"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama_dokter"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nip_dokter"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nip_dokter"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tgl_pinjam"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_pinjam"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tgl_kembali"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_kembali"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_no_medrek"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "no_medrek"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nama"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_tgl_simpan"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "tgl_simpan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tgl_simpan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_simpan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_lokasi_rak"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "lokasi_rak"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_lokasi_rak"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "lokasi_rak"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_status"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "status"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nama_petugas"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama_petugas"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nip_petugas"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nip_petugas"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nama_dokter"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama_dokter"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nip_dokter"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nip_dokter"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_tgl_pinjam"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "tgl_pinjam"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tgl_pinjam"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_pinjam"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_tgl_kembali"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "tgl_kembali"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tgl_kembali"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tgl_kembali"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.RKMedis.My.MySettings.Default.db_usedConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [id], [no_medrek], [nama], [tgl_simpan], [lokasi_rak], [status], [nama_pet"& _ 
                "ugas], [nip_petugas], [nama_dokter], [nip_dokter], [tgl_pinjam], [tgl_kembali] F"& _ 
                "ROM [penyimpanan]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _db_usedDataSet.penyimpananDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _db_usedDataSet.penyimpananDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _db_usedDataSet.penyimpananDataTable = New _db_usedDataSet.penyimpananDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _db_usedDataSet.penyimpananDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _db_usedDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "penyimpanan")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_no_medrek As String, ByVal Original_nama As String, ByVal Original_tgl_simpan As String, ByVal Original_lokasi_rak As Global.System.Nullable(Of Long), ByVal Original_status As String, ByVal Original_nama_petugas As String, ByVal Original_nip_petugas As String, ByVal Original_nama_dokter As String, ByVal Original_nip_dokter As String, ByVal Original_tgl_pinjam As String, ByVal Original_tgl_kembali As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_no_medrek Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_no_medrek")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_no_medrek,String)
            End If
            If (Original_nama Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nama")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_nama,String)
            End If
            If (Original_tgl_simpan Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_tgl_simpan,String)
            End If
            If (Original_lokasi_rak.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_lokasi_rak.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_status")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_status,String)
            End If
            If (Original_nama_petugas Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nama_petugas")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_nama_petugas,String)
            End If
            If (Original_nip_petugas Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nip_petugas")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_nip_petugas,String)
            End If
            If (Original_nama_dokter Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nama_dokter")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_nama_dokter,String)
            End If
            If (Original_nip_dokter Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nip_dokter")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_nip_dokter,String)
            End If
            If (Original_tgl_pinjam Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_tgl_pinjam,String)
            End If
            If (Original_tgl_kembali Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_tgl_kembali,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal no_medrek As String, ByVal nama As String, ByVal tgl_simpan As String, ByVal lokasi_rak As Global.System.Nullable(Of Long), ByVal status As String, ByVal nama_petugas As String, ByVal nip_petugas As String, ByVal nama_dokter As String, ByVal nip_dokter As String, ByVal tgl_pinjam As String, ByVal tgl_kembali As String) As Integer
            If (no_medrek Is Nothing) Then
                Throw New Global.System.ArgumentNullException("no_medrek")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(no_medrek,String)
            End If
            If (nama Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nama")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(nama,String)
            End If
            If (tgl_simpan Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(tgl_simpan,String)
            End If
            If (lokasi_rak.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(lokasi_rak.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("status")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(status,String)
            End If
            If (nama_petugas Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nama_petugas")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(nama_petugas,String)
            End If
            If (nip_petugas Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nip_petugas")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(nip_petugas,String)
            End If
            If (nama_dokter Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nama_dokter")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(nama_dokter,String)
            End If
            If (nip_dokter Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nip_dokter")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(nip_dokter,String)
            End If
            If (tgl_pinjam Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(tgl_pinjam,String)
            End If
            If (tgl_kembali Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(tgl_kembali,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal no_medrek As String,  _
                    ByVal nama As String,  _
                    ByVal tgl_simpan As String,  _
                    ByVal lokasi_rak As Global.System.Nullable(Of Long),  _
                    ByVal status As String,  _
                    ByVal nama_petugas As String,  _
                    ByVal nip_petugas As String,  _
                    ByVal nama_dokter As String,  _
                    ByVal nip_dokter As String,  _
                    ByVal tgl_pinjam As String,  _
                    ByVal tgl_kembali As String,  _
                    ByVal Original_id As Long,  _
                    ByVal Original_no_medrek As String,  _
                    ByVal Original_nama As String,  _
                    ByVal Original_tgl_simpan As String,  _
                    ByVal Original_lokasi_rak As Global.System.Nullable(Of Long),  _
                    ByVal Original_status As String,  _
                    ByVal Original_nama_petugas As String,  _
                    ByVal Original_nip_petugas As String,  _
                    ByVal Original_nama_dokter As String,  _
                    ByVal Original_nip_dokter As String,  _
                    ByVal Original_tgl_pinjam As String,  _
                    ByVal Original_tgl_kembali As String) As Integer
            If (no_medrek Is Nothing) Then
                Throw New Global.System.ArgumentNullException("no_medrek")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(no_medrek,String)
            End If
            If (nama Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nama")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nama,String)
            End If
            If (tgl_simpan Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(tgl_simpan,String)
            End If
            If (lokasi_rak.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(lokasi_rak.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("status")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(status,String)
            End If
            If (nama_petugas Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nama_petugas")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(nama_petugas,String)
            End If
            If (nip_petugas Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nip_petugas")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(nip_petugas,String)
            End If
            If (nama_dokter Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nama_dokter")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(nama_dokter,String)
            End If
            If (nip_dokter Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nip_dokter")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(nip_dokter,String)
            End If
            If (tgl_pinjam Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(tgl_pinjam,String)
            End If
            If (tgl_kembali Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(tgl_kembali,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_id,Long)
            If (Original_no_medrek Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_no_medrek")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_no_medrek,String)
            End If
            If (Original_nama Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nama")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_nama,String)
            End If
            If (Original_tgl_simpan Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_tgl_simpan,String)
            End If
            If (Original_lokasi_rak.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_lokasi_rak.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_status")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_status,String)
            End If
            If (Original_nama_petugas Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nama_petugas")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_nama_petugas,String)
            End If
            If (Original_nip_petugas Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nip_petugas")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_nip_petugas,String)
            End If
            If (Original_nama_dokter Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nama_dokter")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_nama_dokter,String)
            End If
            If (Original_nip_dokter Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nip_dokter")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_nip_dokter,String)
            End If
            If (Original_tgl_pinjam Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_tgl_pinjam,String)
            End If
            If (Original_tgl_kembali Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_tgl_kembali,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class petugasTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "petugas"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("nip", "nip")
            tableMapping.ColumnMappings.Add("nama", "nama")
            tableMapping.ColumnMappings.Add("jabatan", "jabatan")
            tableMapping.ColumnMappings.Add("telp", "telp")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[petugas] WHERE (([id] = @Original_id)"& _ 
                " AND ([nip] = @Original_nip) AND ([nama] = @Original_nama) AND ([jabatan] = @Ori"& _ 
                "ginal_jabatan) AND ([telp] = @Original_telp))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nip"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nip"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nama"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_jabatan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "jabatan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_telp"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "telp"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[petugas] ([nip], [nama], [jabatan], ["& _ 
                "telp]) VALUES (@nip, @nama, @jabatan, @telp)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nip"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nip"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nama"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@jabatan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "jabatan"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@telp"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "telp"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[petugas] SET [nip] = @nip, [nama] = @nama,"& _ 
                " [jabatan] = @jabatan, [telp] = @telp WHERE (([id] = @Original_id) AND ([nip] = "& _ 
                "@Original_nip) AND ([nama] = @Original_nama) AND ([jabatan] = @Original_jabatan)"& _ 
                " AND ([telp] = @Original_telp))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nip"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nip"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nama"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@jabatan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "jabatan"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@telp"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "telp"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nip"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nip"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nama"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_jabatan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "jabatan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_telp"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "telp"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.RKMedis.My.MySettings.Default.db_usedConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [id], [nip], [nama], [jabatan], [telp] FROM [petugas]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _db_usedDataSet.petugasDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _db_usedDataSet.petugasDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _db_usedDataSet.petugasDataTable = New _db_usedDataSet.petugasDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _db_usedDataSet.petugasDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _db_usedDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "petugas")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_nip As String, ByVal Original_nama As String, ByVal Original_jabatan As String, ByVal Original_telp As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_nip Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nip")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_nip,String)
            End If
            If (Original_nama Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nama")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_nama,String)
            End If
            If (Original_jabatan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_jabatan")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_jabatan,String)
            End If
            If (Original_telp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_telp")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_telp,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal nip As String, ByVal nama As String, ByVal jabatan As String, ByVal telp As String) As Integer
            If (nip Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nip")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(nip,String)
            End If
            If (nama Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nama")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(nama,String)
            End If
            If (jabatan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("jabatan")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(jabatan,String)
            End If
            If (telp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("telp")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(telp,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal nip As String, ByVal nama As String, ByVal jabatan As String, ByVal telp As String, ByVal Original_id As Long, ByVal Original_nip As String, ByVal Original_nama As String, ByVal Original_jabatan As String, ByVal Original_telp As String) As Integer
            If (nip Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nip")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(nip,String)
            End If
            If (nama Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nama")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nama,String)
            End If
            If (jabatan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("jabatan")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(jabatan,String)
            End If
            If (telp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("telp")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(telp,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_id,Long)
            If (Original_nip Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nip")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_nip,String)
            End If
            If (Original_nama Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nama")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_nama,String)
            End If
            If (Original_jabatan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_jabatan")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_jabatan,String)
            End If
            If (Original_telp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_telp")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_telp,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class poliklinikTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "poliklinik"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("unit", "unit")
            tableMapping.ColumnMappings.Add("kode", "dokter")
            tableMapping.ColumnMappings.Add("nama_petugas", "nama_petugas")
            tableMapping.ColumnMappings.Add("dokter", "dokter")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[poliklinik] WHERE (([id] = @Original_"& _ 
                "id) AND ([unit] = @Original_unit) AND ((@IsNull_dokter = 1 AND [dokter] IS NULL)"& _ 
                " OR ([dokter] = @Original_dokter)) AND ((@IsNull_nama_petugas = 1 AND [nama_petu"& _ 
                "gas] IS NULL) OR ([nama_petugas] = @Original_nama_petugas)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_unit"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "unit"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_dokter"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "dokter"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_dokter"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "dokter"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_nama_petugas"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "nama_petugas"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nama_petugas"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama_petugas"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[poliklinik] ([unit], [dokter], [nama_"& _ 
                "petugas]) VALUES (@unit, @dokter, @nama_petugas)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@unit"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "unit"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@dokter"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "dokter"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nama_petugas"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama_petugas"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[poliklinik] SET [unit] = @unit, [dokter] ="& _ 
                " @dokter, [nama_petugas] = @nama_petugas WHERE (([id] = @Original_id) AND ([unit"& _ 
                "] = @Original_unit) AND ((@IsNull_dokter = 1 AND [dokter] IS NULL) OR ([dokter] "& _ 
                "= @Original_dokter)) AND ((@IsNull_nama_petugas = 1 AND [nama_petugas] IS NULL) "& _ 
                "OR ([nama_petugas] = @Original_nama_petugas)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@unit"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "unit"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@dokter"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "dokter"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nama_petugas"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama_petugas"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_unit"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "unit"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_dokter"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "dokter"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_dokter"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "dokter"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_nama_petugas"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "nama_petugas"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nama_petugas"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nama_petugas"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.RKMedis.My.MySettings.Default.db_usedConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [id], [unit], [dokter], [nama_petugas] FROM [poliklinik]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _db_usedDataSet.poliklinikDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _db_usedDataSet.poliklinikDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _db_usedDataSet.poliklinikDataTable = New _db_usedDataSet.poliklinikDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _db_usedDataSet.poliklinikDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _db_usedDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "poliklinik")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_unit As String, ByVal Original_dokter As String, ByVal Original_nama_petugas As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_unit")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_unit,String)
            End If
            If (Original_dokter Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_dokter,String)
            End If
            If (Original_nama_petugas Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_nama_petugas,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal unit As String, ByVal dokter As String, ByVal nama_petugas As String) As Integer
            If (unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("unit")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(unit,String)
            End If
            If (dokter Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(dokter,String)
            End If
            If (nama_petugas Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(nama_petugas,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal unit As String, ByVal dokter As String, ByVal nama_petugas As String, ByVal Original_id As Long, ByVal Original_unit As String, ByVal Original_dokter As String, ByVal Original_nama_petugas As String) As Integer
            If (unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("unit")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(unit,String)
            End If
            If (dokter Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(dokter,String)
            End If
            If (nama_petugas Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(nama_petugas,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_id,Long)
            If (Original_unit Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_unit")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_unit,String)
            End If
            If (Original_dokter Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_dokter,String)
            End If
            If (Original_nama_petugas Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_nama_petugas,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class usersTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "users"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("username", "username")
            tableMapping.ColumnMappings.Add("passw", "passw")
            tableMapping.ColumnMappings.Add("rec_quest", "rec_quest")
            tableMapping.ColumnMappings.Add("rec_answer", "rec_answer")
            tableMapping.ColumnMappings.Add("logo_filename", "logo_filename")
            tableMapping.ColumnMappings.Add("logo_content", "logo_content")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[users] WHERE (([id] = @Original_id) A"& _ 
                "ND ([username] = @Original_username) AND ([passw] = @Original_passw) AND ([rec_q"& _ 
                "uest] = @Original_rec_quest) AND ([rec_answer] = @Original_rec_answer) AND ((@Is"& _ 
                "Null_logo_filename = 1 AND [logo_filename] IS NULL) OR ([logo_filename] = @Origi"& _ 
                "nal_logo_filename)) AND ((@IsNull_logo_content = 1 AND [logo_content] IS NULL) O"& _ 
                "R ([logo_content] = @Original_logo_content)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_username"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "username"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_passw"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "passw"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_rec_quest"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "rec_quest"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_rec_answer"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "rec_answer"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_logo_filename"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "logo_filename"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_logo_filename"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "logo_filename"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_logo_content"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "logo_content"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_logo_content"
            param.DbType = Global.System.Data.DbType.Binary
            param.DbType = Global.System.Data.DbType.Binary
            param.SourceColumn = "logo_content"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[users] ([username], [passw], [rec_que"& _ 
                "st], [rec_answer], [logo_filename], [logo_content]) VALUES (@username, @passw, @"& _ 
                "rec_quest, @rec_answer, @logo_filename, @logo_content)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@username"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "username"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@passw"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "passw"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@rec_quest"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "rec_quest"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@rec_answer"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "rec_answer"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@logo_filename"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "logo_filename"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@logo_content"
            param.DbType = Global.System.Data.DbType.Binary
            param.DbType = Global.System.Data.DbType.Binary
            param.SourceColumn = "logo_content"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[users] SET [username] = @username, [passw]"& _ 
                " = @passw, [rec_quest] = @rec_quest, [rec_answer] = @rec_answer, [logo_filename]"& _ 
                " = @logo_filename, [logo_content] = @logo_content WHERE (([id] = @Original_id) A"& _ 
                "ND ([username] = @Original_username) AND ([passw] = @Original_passw) AND ([rec_q"& _ 
                "uest] = @Original_rec_quest) AND ([rec_answer] = @Original_rec_answer) AND ((@Is"& _ 
                "Null_logo_filename = 1 AND [logo_filename] IS NULL) OR ([logo_filename] = @Origi"& _ 
                "nal_logo_filename)) AND ((@IsNull_logo_content = 1 AND [logo_content] IS NULL) O"& _ 
                "R ([logo_content] = @Original_logo_content)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@username"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "username"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@passw"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "passw"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@rec_quest"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "rec_quest"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@rec_answer"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "rec_answer"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@logo_filename"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "logo_filename"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@logo_content"
            param.DbType = Global.System.Data.DbType.Binary
            param.DbType = Global.System.Data.DbType.Binary
            param.SourceColumn = "logo_content"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_username"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "username"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_passw"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "passw"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_rec_quest"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "rec_quest"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_rec_answer"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "rec_answer"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_logo_filename"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "logo_filename"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_logo_filename"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "logo_filename"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_logo_content"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "logo_content"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_logo_content"
            param.DbType = Global.System.Data.DbType.Binary
            param.DbType = Global.System.Data.DbType.Binary
            param.SourceColumn = "logo_content"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.RKMedis.My.MySettings.Default.db_usedConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [id], [username], [passw], [rec_quest], [rec_answer], [logo_filename], [lo"& _ 
                "go_content] FROM [users]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _db_usedDataSet.usersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _db_usedDataSet.usersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _db_usedDataSet.usersDataTable = New _db_usedDataSet.usersDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _db_usedDataSet.usersDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _db_usedDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "users")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_username As String, ByVal Original_passw As String, ByVal Original_rec_quest As String, ByVal Original_rec_answer As String, ByVal Original_logo_filename As String, ByVal Original_logo_content() As Byte) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_username Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_username")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_username,String)
            End If
            If (Original_passw Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_passw")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_passw,String)
            End If
            If (Original_rec_quest Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_rec_quest")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_rec_quest,String)
            End If
            If (Original_rec_answer Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_rec_answer")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_rec_answer,String)
            End If
            If (Original_logo_filename Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_logo_filename,String)
            End If
            If (Original_logo_content Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_logo_content,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal username As String, ByVal passw As String, ByVal rec_quest As String, ByVal rec_answer As String, ByVal logo_filename As String, ByVal logo_content() As Byte) As Integer
            If (username Is Nothing) Then
                Throw New Global.System.ArgumentNullException("username")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(username,String)
            End If
            If (passw Is Nothing) Then
                Throw New Global.System.ArgumentNullException("passw")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(passw,String)
            End If
            If (rec_quest Is Nothing) Then
                Throw New Global.System.ArgumentNullException("rec_quest")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(rec_quest,String)
            End If
            If (rec_answer Is Nothing) Then
                Throw New Global.System.ArgumentNullException("rec_answer")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(rec_answer,String)
            End If
            If (logo_filename Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(logo_filename,String)
            End If
            If (logo_content Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(logo_content,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal username As String, ByVal passw As String, ByVal rec_quest As String, ByVal rec_answer As String, ByVal logo_filename As String, ByVal logo_content() As Byte, ByVal Original_id As Long, ByVal Original_username As String, ByVal Original_passw As String, ByVal Original_rec_quest As String, ByVal Original_rec_answer As String, ByVal Original_logo_filename As String, ByVal Original_logo_content() As Byte) As Integer
            If (username Is Nothing) Then
                Throw New Global.System.ArgumentNullException("username")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(username,String)
            End If
            If (passw Is Nothing) Then
                Throw New Global.System.ArgumentNullException("passw")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(passw,String)
            End If
            If (rec_quest Is Nothing) Then
                Throw New Global.System.ArgumentNullException("rec_quest")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(rec_quest,String)
            End If
            If (rec_answer Is Nothing) Then
                Throw New Global.System.ArgumentNullException("rec_answer")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(rec_answer,String)
            End If
            If (logo_filename Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(logo_filename,String)
            End If
            If (logo_content Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(logo_content,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_id,Long)
            If (Original_username Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_username")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_username,String)
            End If
            If (Original_passw Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_passw")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_passw,String)
            End If
            If (Original_rec_quest Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_rec_quest")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_rec_quest,String)
            End If
            If (Original_rec_answer Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_rec_answer")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_rec_answer,String)
            End If
            If (Original_logo_filename Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_logo_filename,String)
            End If
            If (Original_logo_content Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_logo_content,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _dokterTableAdapter As dokterTableAdapter
        
        Private _history_pinjamTableAdapter As history_pinjamTableAdapter
        
        Private _kunjunganTableAdapter As kunjunganTableAdapter
        
        Private _pasienTableAdapter As pasienTableAdapter
        
        Private _penyimpananTableAdapter As penyimpananTableAdapter
        
        Private _petugasTableAdapter As petugasTableAdapter
        
        Private _poliklinikTableAdapter As poliklinikTableAdapter
        
        Private _usersTableAdapter As usersTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property dokterTableAdapter() As dokterTableAdapter
            Get
                Return Me._dokterTableAdapter
            End Get
            Set
                Me._dokterTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property history_pinjamTableAdapter() As history_pinjamTableAdapter
            Get
                Return Me._history_pinjamTableAdapter
            End Get
            Set
                Me._history_pinjamTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property kunjunganTableAdapter() As kunjunganTableAdapter
            Get
                Return Me._kunjunganTableAdapter
            End Get
            Set
                Me._kunjunganTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property pasienTableAdapter() As pasienTableAdapter
            Get
                Return Me._pasienTableAdapter
            End Get
            Set
                Me._pasienTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property penyimpananTableAdapter() As penyimpananTableAdapter
            Get
                Return Me._penyimpananTableAdapter
            End Get
            Set
                Me._penyimpananTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property petugasTableAdapter() As petugasTableAdapter
            Get
                Return Me._petugasTableAdapter
            End Get
            Set
                Me._petugasTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property poliklinikTableAdapter() As poliklinikTableAdapter
            Get
                Return Me._poliklinikTableAdapter
            End Get
            Set
                Me._poliklinikTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property usersTableAdapter() As usersTableAdapter
            Get
                Return Me._usersTableAdapter
            End Get
            Set
                Me._usersTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._dokterTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dokterTableAdapter.Connection) Is Nothing)) Then
                    Return Me._dokterTableAdapter.Connection
                End If
                If ((Not (Me._history_pinjamTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._history_pinjamTableAdapter.Connection) Is Nothing)) Then
                    Return Me._history_pinjamTableAdapter.Connection
                End If
                If ((Not (Me._kunjunganTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._kunjunganTableAdapter.Connection) Is Nothing)) Then
                    Return Me._kunjunganTableAdapter.Connection
                End If
                If ((Not (Me._pasienTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pasienTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pasienTableAdapter.Connection
                End If
                If ((Not (Me._penyimpananTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._penyimpananTableAdapter.Connection) Is Nothing)) Then
                    Return Me._penyimpananTableAdapter.Connection
                End If
                If ((Not (Me._petugasTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._petugasTableAdapter.Connection) Is Nothing)) Then
                    Return Me._petugasTableAdapter.Connection
                End If
                If ((Not (Me._poliklinikTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._poliklinikTableAdapter.Connection) Is Nothing)) Then
                    Return Me._poliklinikTableAdapter.Connection
                End If
                If ((Not (Me._usersTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._usersTableAdapter.Connection) Is Nothing)) Then
                    Return Me._usersTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._dokterTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._history_pinjamTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._kunjunganTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pasienTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._penyimpananTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._petugasTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._poliklinikTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._usersTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As _db_usedDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._dokterTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dokter.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dokterTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._history_pinjamTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.history_pinjam.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._history_pinjamTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._kunjunganTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.kunjungan.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._kunjunganTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pasienTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.pasien.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pasienTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._penyimpananTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.penyimpanan.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._penyimpananTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._petugasTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.petugas.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._petugasTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._poliklinikTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.poliklinik.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._poliklinikTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._usersTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.users.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._usersTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As _db_usedDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._dokterTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dokter.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dokterTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._history_pinjamTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.history_pinjam.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._history_pinjamTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._kunjunganTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.kunjungan.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._kunjunganTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pasienTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.pasien.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pasienTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._penyimpananTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.penyimpanan.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._penyimpananTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._petugasTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.petugas.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._petugasTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._poliklinikTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.poliklinik.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._poliklinikTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._usersTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.users.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._usersTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As _db_usedDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._usersTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.users.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._usersTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._poliklinikTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.poliklinik.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._poliklinikTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._petugasTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.petugas.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._petugasTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._penyimpananTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.penyimpanan.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._penyimpananTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pasienTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.pasien.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pasienTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._kunjunganTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.kunjungan.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._kunjunganTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._history_pinjamTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.history_pinjam.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._history_pinjamTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._dokterTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dokter.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dokterTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As _db_usedDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._dokterTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dokterTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._history_pinjamTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._history_pinjamTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._kunjunganTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._kunjunganTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pasienTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pasienTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._penyimpananTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._penyimpananTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._petugasTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._petugasTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._poliklinikTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._poliklinikTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._usersTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._usersTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._dokterTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dokterTableAdapter, Me._dokterTableAdapter.Connection)
                    Me._dokterTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._dokterTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._dokterTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dokterTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dokterTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._history_pinjamTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._history_pinjamTableAdapter, Me._history_pinjamTableAdapter.Connection)
                    Me._history_pinjamTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._history_pinjamTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._history_pinjamTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._history_pinjamTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._history_pinjamTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._kunjunganTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._kunjunganTableAdapter, Me._kunjunganTableAdapter.Connection)
                    Me._kunjunganTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._kunjunganTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._kunjunganTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._kunjunganTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._kunjunganTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pasienTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pasienTableAdapter, Me._pasienTableAdapter.Connection)
                    Me._pasienTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._pasienTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._pasienTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pasienTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pasienTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._penyimpananTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._penyimpananTableAdapter, Me._penyimpananTableAdapter.Connection)
                    Me._penyimpananTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._penyimpananTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._penyimpananTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._penyimpananTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._penyimpananTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._petugasTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._petugasTableAdapter, Me._petugasTableAdapter.Connection)
                    Me._petugasTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._petugasTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._petugasTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._petugasTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._petugasTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._poliklinikTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._poliklinikTableAdapter, Me._poliklinikTableAdapter.Connection)
                    Me._poliklinikTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._poliklinikTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._poliklinikTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._poliklinikTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._poliklinikTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._usersTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._usersTableAdapter, Me._usersTableAdapter.Connection)
                    Me._usersTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._usersTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._usersTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._usersTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._usersTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._dokterTableAdapter) Is Nothing) Then
                    Me._dokterTableAdapter.Connection = CType(revertConnections(Me._dokterTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._dokterTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._history_pinjamTableAdapter) Is Nothing) Then
                    Me._history_pinjamTableAdapter.Connection = CType(revertConnections(Me._history_pinjamTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._history_pinjamTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._kunjunganTableAdapter) Is Nothing) Then
                    Me._kunjunganTableAdapter.Connection = CType(revertConnections(Me._kunjunganTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._kunjunganTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pasienTableAdapter) Is Nothing) Then
                    Me._pasienTableAdapter.Connection = CType(revertConnections(Me._pasienTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._pasienTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._penyimpananTableAdapter) Is Nothing) Then
                    Me._penyimpananTableAdapter.Connection = CType(revertConnections(Me._penyimpananTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._penyimpananTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._petugasTableAdapter) Is Nothing) Then
                    Me._petugasTableAdapter.Connection = CType(revertConnections(Me._petugasTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._petugasTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._poliklinikTableAdapter) Is Nothing) Then
                    Me._poliklinikTableAdapter.Connection = CType(revertConnections(Me._poliklinikTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._poliklinikTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._usersTableAdapter) Is Nothing) Then
                    Me._usersTableAdapter.Connection = CType(revertConnections(Me._usersTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._usersTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
